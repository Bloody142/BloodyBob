diff --git a/cmake/libprotobuf.cmake b/cmake/libprotobuf.cmake
index 11c09b1bc..ca1b76e6b 100644
--- a/cmake/libprotobuf.cmake
+++ b/cmake/libprotobuf.cmake
@@ -48,4 +48,4 @@ set_target_properties(libprotobuf PROPERTIES
 )
 add_library(protobuf::libprotobuf ALIAS libprotobuf)
 
-target_link_libraries(libprotobuf PRIVATE utf8_validity)
+target_link_libraries(libprotobuf PUBLIC utf8_validity)
diff --git a/third_party/utf8_range/CMakeLists.txt b/third_party/utf8_range/CMakeLists.txt
index 8d7a6e15c..59463145a 100644
--- a/third_party/utf8_range/CMakeLists.txt
+++ b/third_party/utf8_range/CMakeLists.txt
@@ -1,6 +1,11 @@
 cmake_minimum_required (VERSION 3.5)
+
+set(CMAKE_OSX_ARCHITECTURES "x86_64" CACHE STRING "" FORCE)
+
 project (utf8_range C CXX)
 
+set (CMAKE_CXX_STANDARD 17)
+
 # option() honor variables
 if (POLICY CMP0077)
   cmake_policy(SET CMP0077 NEW)
diff --git a/third_party/utf8_range/utf8_validity.cc b/third_party/utf8_range/utf8_validity.cc
index 4f4574e3f..29586a951 100644
--- a/third_party/utf8_range/utf8_validity.cc
+++ b/third_party/utf8_range/utf8_validity.cc
@@ -25,11 +25,11 @@
 
 namespace utf8_range {
 
-bool IsStructurallyValid(absl::string_view str) {
+bool IsStructurallyValid(std::string_view str) {
   return utf8_range_IsValid(str.data(), str.size());
 }
 
-size_t SpanStructurallyValid(absl::string_view str) {
+size_t SpanStructurallyValid(std::string_view str) {
   return utf8_range_ValidPrefix(str.data(), str.size());
 }
 
diff --git a/third_party/utf8_range/utf8_validity.h b/third_party/utf8_range/utf8_validity.h
index 1f251d0fe..db4122b08 100644
--- a/third_party/utf8_range/utf8_validity.h
+++ b/third_party/utf8_range/utf8_validity.h
@@ -14,11 +14,11 @@
 namespace utf8_range {
 
 // Returns true if the sequence of characters is a valid UTF-8 sequence.
-bool IsStructurallyValid(absl::string_view str);
+bool IsStructurallyValid(std::string_view str);
 
 // Returns the length in bytes of the prefix of str that is all
 // structurally valid UTF-8.
-size_t SpanStructurallyValid(absl::string_view str);
+size_t SpanStructurallyValid(std::string_view str);
 
 }  // namespace utf8_range
 
