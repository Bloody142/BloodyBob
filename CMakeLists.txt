cmake_minimum_required(VERSION 3.11)
project(STFC-Community-Patch)
set(CMAKE_CXX_STANDARD 20)
set(CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++20 /W3 /permissive- /bigobj /await")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")

# Windows' math include does not define constants by default.
# Set this definition so it does.
# Also set NOMINMAX so the min and max functions are not overwritten with macros.
IF(MSVC)
    add_definitions(-D_USE_MATH_DEFINES)
    add_definitions(-DNOMINMAX)
ENDIF()

include(FetchContent)

FetchContent_Declare(json URL https://github.com/nlohmann/json/releases/download/v3.11.2/json.tar.xz)
FetchContent_MakeAvailable(json)

FetchContent_Declare(
    tomlplusplus
    GIT_REPOSITORY https://github.com/marzer/tomlplusplus.git
    GIT_TAG v2.5.0
    GIT_PROGRESS TRUE
)
FetchContent_MakeAvailable(tomlplusplus)

FetchContent_Declare(
      spud
      GIT_REPOSITORY "https://github.com/tashcan/spud.git"
      GIT_TAG 43f9d645401d8e014502af67cc59160cb46a6b3e
      GIT_PROGRESS TRUE
)
FetchContent_MakeAvailable(spud)

FetchContent_Declare(
      protobuf
      GIT_REPOSITORY "https://github.com/protocolbuffers/protobuf.git"
      GIT_TAG v3.24.3
      GIT_PROGRESS TRUE
)
FetchContent_MakeAvailable(protobuf)

FetchContent_Declare(
    eabase
    GIT_REPOSITORY https://github.com/electronicarts/EABase.git
    GIT_TAG origin/master
    GIT_PROGRESS TRUE
    GIT_SUBMODULES ""
)
FetchContent_MakeAvailable(eabase)

FetchContent_Declare(
    eastl
    GIT_REPOSITORY https://github.com/electronicarts/EASTL.git
    GIT_TAG origin/master
    GIT_PROGRESS TRUE
    GIT_SUBMODULES ""
)
FetchContent_MakeAvailable(eastl)

SET(TARGET_H
    Header.h
    Plugin.h
    messagelog.h
    win32application.h
    timer.h
)

# Local source files here
SET(TARGET_SRC
    src/main.cc
    src/version.cc
    src/utils.cc
    src/il2cpp/il2cpp_helper.cc
    src/patches/key.cc
    src/patches/modifierkey.cc
    src/patches/mapkey.cc
    src/patches/config.cc
    src/patches/patches.cc
)

SET(PATCHES_PARTS
    src/patches/parts/buff_fixes.cc
    src/patches/parts/chat.cc
    src/patches/parts/disable_banners.cc
    src/patches/parts/fix_pan.cc
    src/patches/parts/fix_unity_web_request.cc
    src/patches/parts/free_resize.cc
    src/patches/parts/hotkeys.cc
    src/patches/parts/improve_responsiveness.cc
    src/patches/parts/ui_scale.cc
    src/patches/parts/misc.cc
    src/patches/parts/sync.cc
    src/patches/parts/testing.cc
    src/patches/parts/zoom.cc
)

file(GLOB_RECURSE PRIME_SRC src/prime/*.cc)
file(GLOB_RECURSE PRIME_HDRS src/prime/*.h)

function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
  set(files ${${SOURCE_VARIABLE_NAME}})
  # Generate a unique filename for the unity build translation unit
  set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)
  # Exclude all translation units from compilation
  set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)
  # Open the ub file
  FILE(WRITE ${unit_build_file} "// Unity Build generated by CMake\n")
  # Add include statement for each translation unit
  foreach(source_file ${files} )
    FILE( APPEND ${unit_build_file} "#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n")
  endforeach(source_file)
  # Complement list of translation units with the name of ub
  set(${SOURCE_VARIABLE_NAME} ${unit_build_file} PARENT_SCOPE)
endfunction(enable_unity_build)

enable_unity_build(prime_unity ${PRIME_SRC})

add_library(stfc-community-patch SHARED
    ${TARGET_SRC}
    ${PATCHES_PARTS}
    ${PRIME_SRC}
    ${PRIME_HDRS}
    src/version.def
    "src/il2cpp/il2cpp_helper.h"
)

target_sources(stfc-community-patch PRIVATE src/version.rc)

include_directories(stfc-community-patch third_party src src/patches ${Protobuf_INCLUDE_DIRS})

add_dependencies(stfc-community-patch EASTL)
target_link_libraries(stfc-community-patch PRIVATE spud nlohmann_json::nlohmann_json protobuf::libprotobuf tomlplusplus_tomlplusplus spdlog EASTL)

add_subdirectory(third_party)
