// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Digit.Prime.TerritoryCapture.proto

#include "Digit.Prime.TerritoryCapture.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Digit {
namespace Prime {
namespace TerritoryCapture {
        template <typename>
PROTOBUF_CONSTEXPR TCSlideshowFlag::TCSlideshowFlag(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.hasseentcslideshow_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TCSlideshowFlagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TCSlideshowFlagDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TCSlideshowFlagDefaultTypeInternal() {}
  union {
    TCSlideshowFlag _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TCSlideshowFlagDefaultTypeInternal _TCSlideshowFlag_default_instance_;
}  // namespace TerritoryCapture
}  // namespace Prime
}  // namespace Digit
static ::_pb::Metadata file_level_metadata_Digit_2ePrime_2eTerritoryCapture_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Digit_2ePrime_2eTerritoryCapture_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Digit_2ePrime_2eTerritoryCapture_2eproto = nullptr;
const ::uint32_t TableStruct_Digit_2ePrime_2eTerritoryCapture_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::TerritoryCapture::TCSlideshowFlag, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::TerritoryCapture::TCSlideshowFlag, _impl_.hasseentcslideshow_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Digit::Prime::TerritoryCapture::TCSlideshowFlag)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Digit::Prime::TerritoryCapture::_TCSlideshowFlag_default_instance_._instance,
};
const char descriptor_table_protodef_Digit_2ePrime_2eTerritoryCapture_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\"Digit.Prime.TerritoryCapture.proto\022\034Di"
    "git.Prime.TerritoryCapture\"-\n\017TCSlidesho"
    "wFlag\022\032\n\022hasSeenTCSlideshow\030\001 \001(\010b\006proto"
    "3"
};
static ::absl::once_flag descriptor_table_Digit_2ePrime_2eTerritoryCapture_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Digit_2ePrime_2eTerritoryCapture_2eproto = {
    false,
    false,
    121,
    descriptor_table_protodef_Digit_2ePrime_2eTerritoryCapture_2eproto,
    "Digit.Prime.TerritoryCapture.proto",
    &descriptor_table_Digit_2ePrime_2eTerritoryCapture_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_Digit_2ePrime_2eTerritoryCapture_2eproto::offsets,
    file_level_metadata_Digit_2ePrime_2eTerritoryCapture_2eproto,
    file_level_enum_descriptors_Digit_2ePrime_2eTerritoryCapture_2eproto,
    file_level_service_descriptors_Digit_2ePrime_2eTerritoryCapture_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Digit_2ePrime_2eTerritoryCapture_2eproto_getter() {
  return &descriptor_table_Digit_2ePrime_2eTerritoryCapture_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Digit_2ePrime_2eTerritoryCapture_2eproto(&descriptor_table_Digit_2ePrime_2eTerritoryCapture_2eproto);
namespace Digit {
namespace Prime {
namespace TerritoryCapture {
// ===================================================================

class TCSlideshowFlag::_Internal {
 public:
};

TCSlideshowFlag::TCSlideshowFlag(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
}
TCSlideshowFlag::TCSlideshowFlag(const TCSlideshowFlag& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
}
inline void TCSlideshowFlag::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hasseentcslideshow_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TCSlideshowFlag::~TCSlideshowFlag() {
  // @@protoc_insertion_point(destructor:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TCSlideshowFlag::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TCSlideshowFlag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TCSlideshowFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hasseentcslideshow_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TCSlideshowFlag::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TCSlideshowFlag::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TCSlideshowFlag_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool hasSeenTCSlideshow = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TCSlideshowFlag, _impl_.hasseentcslideshow_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TCSlideshowFlag, _impl_.hasseentcslideshow_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool hasSeenTCSlideshow = 1;
    {PROTOBUF_FIELD_OFFSET(TCSlideshowFlag, _impl_.hasseentcslideshow_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TCSlideshowFlag::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool hasSeenTCSlideshow = 1;
  if (this->_internal_hasseentcslideshow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_hasseentcslideshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  return target;
}

::size_t TCSlideshowFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool hasSeenTCSlideshow = 1;
  if (this->_internal_hasseentcslideshow() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TCSlideshowFlag::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TCSlideshowFlag::MergeImpl
};
const ::google::protobuf::Message::ClassData*TCSlideshowFlag::GetClassData() const { return &_class_data_; }


void TCSlideshowFlag::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TCSlideshowFlag*>(&to_msg);
  auto& from = static_cast<const TCSlideshowFlag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hasseentcslideshow() != 0) {
    _this->_internal_set_hasseentcslideshow(from._internal_hasseentcslideshow());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TCSlideshowFlag::CopyFrom(const TCSlideshowFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TCSlideshowFlag::IsInitialized() const {
  return true;
}

void TCSlideshowFlag::InternalSwap(TCSlideshowFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.hasseentcslideshow_, other->_impl_.hasseentcslideshow_);
}

::google::protobuf::Metadata TCSlideshowFlag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Digit_2ePrime_2eTerritoryCapture_2eproto_getter, &descriptor_table_Digit_2ePrime_2eTerritoryCapture_2eproto_once,
      file_level_metadata_Digit_2ePrime_2eTerritoryCapture_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace TerritoryCapture
}  // namespace Prime
}  // namespace Digit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
