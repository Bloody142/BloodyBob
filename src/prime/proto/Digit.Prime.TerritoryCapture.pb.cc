// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Digit.Prime.TerritoryCapture.proto

#include "Digit.Prime.TerritoryCapture.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Digit {
namespace Prime {
namespace TerritoryCapture {
        template <typename>
PROTOBUF_CONSTEXPR TCSlideshowFlag::TCSlideshowFlag(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.hasseentcslideshow_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TCSlideshowFlagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TCSlideshowFlagDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TCSlideshowFlagDefaultTypeInternal() {}
  union {
    TCSlideshowFlag _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TCSlideshowFlagDefaultTypeInternal _TCSlideshowFlag_default_instance_;
}  // namespace TerritoryCapture
}  // namespace Prime
}  // namespace Digit
namespace Digit {
namespace Prime {
namespace TerritoryCapture {
// ===================================================================

class TCSlideshowFlag::_Internal {
 public:
};

TCSlideshowFlag::TCSlideshowFlag(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
}
TCSlideshowFlag::TCSlideshowFlag(const TCSlideshowFlag& from)
    : ::google::protobuf::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
}
inline void TCSlideshowFlag::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hasseentcslideshow_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TCSlideshowFlag::~TCSlideshowFlag() {
  // @@protoc_insertion_point(destructor:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TCSlideshowFlag::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TCSlideshowFlag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TCSlideshowFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hasseentcslideshow_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* TCSlideshowFlag::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TCSlideshowFlag::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TCSlideshowFlag_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // bool hasSeenTCSlideshow = 1;
    {::_pbi::TcParser::FastV8S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TCSlideshowFlag, _impl_.hasseentcslideshow_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool hasSeenTCSlideshow = 1;
    {PROTOBUF_FIELD_OFFSET(TCSlideshowFlag, _impl_.hasseentcslideshow_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TCSlideshowFlag::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool hasSeenTCSlideshow = 1;
  if (this->_internal_hasseentcslideshow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_hasseentcslideshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  return target;
}

::size_t TCSlideshowFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool hasSeenTCSlideshow = 1;
  if (this->_internal_hasseentcslideshow() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TCSlideshowFlag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TCSlideshowFlag*>(
      &from));
}

void TCSlideshowFlag::MergeFrom(const TCSlideshowFlag& from) {
  TCSlideshowFlag* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hasseentcslideshow() != 0) {
    _this->_internal_set_hasseentcslideshow(from._internal_hasseentcslideshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TCSlideshowFlag::CopyFrom(const TCSlideshowFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Digit.Prime.TerritoryCapture.TCSlideshowFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TCSlideshowFlag::IsInitialized() const {
  return true;
}

void TCSlideshowFlag::InternalSwap(TCSlideshowFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.hasseentcslideshow_, other->_impl_.hasseentcslideshow_);
}

std::string TCSlideshowFlag::GetTypeName() const {
  return "Digit.Prime.TerritoryCapture.TCSlideshowFlag";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TerritoryCapture
}  // namespace Prime
}  // namespace Digit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
