// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Digit.Prime.NewFlags.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eNewFlags_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eNewFlags_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Digit_2ePrime_2eNewFlags_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Digit_2ePrime_2eNewFlags_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Digit_2ePrime_2eNewFlags_2eproto;
namespace Digit {
namespace Prime {
namespace NewFlags {
class NewFlagCacheMap;
struct NewFlagCacheMapDefaultTypeInternal;
extern NewFlagCacheMapDefaultTypeInternal _NewFlagCacheMap_default_instance_;
class NewFlagCacheMap_ItemFlagsEntry_DoNotUse;
struct NewFlagCacheMap_ItemFlagsEntry_DoNotUseDefaultTypeInternal;
extern NewFlagCacheMap_ItemFlagsEntry_DoNotUseDefaultTypeInternal _NewFlagCacheMap_ItemFlagsEntry_DoNotUse_default_instance_;
class NewFlagCacheMap_ItemsEntry_DoNotUse;
struct NewFlagCacheMap_ItemsEntry_DoNotUseDefaultTypeInternal;
extern NewFlagCacheMap_ItemsEntry_DoNotUseDefaultTypeInternal _NewFlagCacheMap_ItemsEntry_DoNotUse_default_instance_;
class NewFlagDataCache;
struct NewFlagDataCacheDefaultTypeInternal;
extern NewFlagDataCacheDefaultTypeInternal _NewFlagDataCache_default_instance_;
class NewFlagDataCache_CategoriesEntry_DoNotUse;
struct NewFlagDataCache_CategoriesEntry_DoNotUseDefaultTypeInternal;
extern NewFlagDataCache_CategoriesEntry_DoNotUseDefaultTypeInternal _NewFlagDataCache_CategoriesEntry_DoNotUse_default_instance_;
}  // namespace NewFlags
}  // namespace Prime
}  // namespace Digit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Digit {
namespace Prime {
namespace NewFlags {

// ===================================================================


// -------------------------------------------------------------------

class NewFlagCacheMap_ItemsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<NewFlagCacheMap_ItemsEntry_DoNotUse, 
    ::int64_t, bool,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::google::protobuf::internal::MapEntry<NewFlagCacheMap_ItemsEntry_DoNotUse, 
    ::int64_t, bool,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> SuperType;
  NewFlagCacheMap_ItemsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewFlagCacheMap_ItemsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NewFlagCacheMap_ItemsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NewFlagCacheMap_ItemsEntry_DoNotUse& other);
  static const NewFlagCacheMap_ItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NewFlagCacheMap_ItemsEntry_DoNotUse*>(&_NewFlagCacheMap_ItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Digit_2ePrime_2eNewFlags_2eproto;
};
// -------------------------------------------------------------------

class NewFlagCacheMap_ItemFlagsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<NewFlagCacheMap_ItemFlagsEntry_DoNotUse, 
    ::int64_t, ::int32_t,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::google::protobuf::internal::MapEntry<NewFlagCacheMap_ItemFlagsEntry_DoNotUse, 
    ::int64_t, ::int32_t,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> SuperType;
  NewFlagCacheMap_ItemFlagsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewFlagCacheMap_ItemFlagsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NewFlagCacheMap_ItemFlagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NewFlagCacheMap_ItemFlagsEntry_DoNotUse& other);
  static const NewFlagCacheMap_ItemFlagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NewFlagCacheMap_ItemFlagsEntry_DoNotUse*>(&_NewFlagCacheMap_ItemFlagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Digit_2ePrime_2eNewFlags_2eproto;
};
// -------------------------------------------------------------------

class NewFlagCacheMap final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Digit.Prime.NewFlags.NewFlagCacheMap) */ {
 public:
  inline NewFlagCacheMap() : NewFlagCacheMap(nullptr) {}
  ~NewFlagCacheMap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NewFlagCacheMap(::google::protobuf::internal::ConstantInitialized);

  NewFlagCacheMap(const NewFlagCacheMap& from);
  NewFlagCacheMap(NewFlagCacheMap&& from) noexcept
    : NewFlagCacheMap() {
    *this = ::std::move(from);
  }

  inline NewFlagCacheMap& operator=(const NewFlagCacheMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFlagCacheMap& operator=(NewFlagCacheMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewFlagCacheMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewFlagCacheMap* internal_default_instance() {
    return reinterpret_cast<const NewFlagCacheMap*>(
               &_NewFlagCacheMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewFlagCacheMap& a, NewFlagCacheMap& b) {
    a.Swap(&b);
  }
  inline void Swap(NewFlagCacheMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewFlagCacheMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewFlagCacheMap* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewFlagCacheMap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewFlagCacheMap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NewFlagCacheMap& from) {
    NewFlagCacheMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFlagCacheMap* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Prime.NewFlags.NewFlagCacheMap";
  }
  protected:
  explicit NewFlagCacheMap(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kItemFlagsFieldNumber = 2,
  };
  // map<int64, bool> items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  const ::google::protobuf::Map<::int64_t, bool>& items() const;
  ::google::protobuf::Map<::int64_t, bool>* mutable_items();

  private:
  const ::google::protobuf::Map<::int64_t, bool>& _internal_items() const;
  ::google::protobuf::Map<::int64_t, bool>* _internal_mutable_items();

  public:
  // map<int64, int32> itemFlags = 2;
  int itemflags_size() const;
  private:
  int _internal_itemflags_size() const;

  public:
  void clear_itemflags() ;
  const ::google::protobuf::Map<::int64_t, ::int32_t>& itemflags() const;
  ::google::protobuf::Map<::int64_t, ::int32_t>* mutable_itemflags();

  private:
  const ::google::protobuf::Map<::int64_t, ::int32_t>& _internal_itemflags() const;
  ::google::protobuf::Map<::int64_t, ::int32_t>* _internal_mutable_itemflags();

  public:
  // @@protoc_insertion_point(class_scope:Digit.Prime.NewFlags.NewFlagCacheMap)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<NewFlagCacheMap_ItemsEntry_DoNotUse, ::int64_t, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        items_;
    ::google::protobuf::internal::MapField<NewFlagCacheMap_ItemFlagsEntry_DoNotUse, ::int64_t, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        itemflags_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2ePrime_2eNewFlags_2eproto;
};// -------------------------------------------------------------------

class NewFlagDataCache_CategoriesEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<NewFlagDataCache_CategoriesEntry_DoNotUse, 
    ::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<NewFlagDataCache_CategoriesEntry_DoNotUse, 
    ::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  NewFlagDataCache_CategoriesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewFlagDataCache_CategoriesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NewFlagDataCache_CategoriesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NewFlagDataCache_CategoriesEntry_DoNotUse& other);
  static const NewFlagDataCache_CategoriesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NewFlagDataCache_CategoriesEntry_DoNotUse*>(&_NewFlagDataCache_CategoriesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Digit_2ePrime_2eNewFlags_2eproto;
};
// -------------------------------------------------------------------

class NewFlagDataCache final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Digit.Prime.NewFlags.NewFlagDataCache) */ {
 public:
  inline NewFlagDataCache() : NewFlagDataCache(nullptr) {}
  ~NewFlagDataCache() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NewFlagDataCache(::google::protobuf::internal::ConstantInitialized);

  NewFlagDataCache(const NewFlagDataCache& from);
  NewFlagDataCache(NewFlagDataCache&& from) noexcept
    : NewFlagDataCache() {
    *this = ::std::move(from);
  }

  inline NewFlagDataCache& operator=(const NewFlagDataCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFlagDataCache& operator=(NewFlagDataCache&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewFlagDataCache& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewFlagDataCache* internal_default_instance() {
    return reinterpret_cast<const NewFlagDataCache*>(
               &_NewFlagDataCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NewFlagDataCache& a, NewFlagDataCache& b) {
    a.Swap(&b);
  }
  inline void Swap(NewFlagDataCache* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewFlagDataCache* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewFlagDataCache* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewFlagDataCache>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewFlagDataCache& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NewFlagDataCache& from) {
    NewFlagDataCache::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFlagDataCache* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Prime.NewFlags.NewFlagDataCache";
  }
  protected:
  explicit NewFlagDataCache(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // map<int32, .Digit.Prime.NewFlags.NewFlagCacheMap> categories = 1;
  int categories_size() const;
  private:
  int _internal_categories_size() const;

  public:
  void clear_categories() ;
  const ::google::protobuf::Map<::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap>& categories() const;
  ::google::protobuf::Map<::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap>* mutable_categories();

  private:
  const ::google::protobuf::Map<::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap>& _internal_categories() const;
  ::google::protobuf::Map<::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap>* _internal_mutable_categories();

  public:
  // int32 version = 2;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Digit.Prime.NewFlags.NewFlagDataCache)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<NewFlagDataCache_CategoriesEntry_DoNotUse, ::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        categories_;
    ::int32_t version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2ePrime_2eNewFlags_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NewFlagCacheMap

// map<int64, bool> items = 1;
inline int NewFlagCacheMap::_internal_items_size() const {
  return _internal_items().size();
}
inline int NewFlagCacheMap::items_size() const {
  return _internal_items_size();
}
inline void NewFlagCacheMap::clear_items() {
  _impl_.items_.Clear();
}
inline const ::google::protobuf::Map<::int64_t, bool>& NewFlagCacheMap::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_.GetMap();
}
inline const ::google::protobuf::Map<::int64_t, bool>& NewFlagCacheMap::items() const {
  // @@protoc_insertion_point(field_map:Digit.Prime.NewFlags.NewFlagCacheMap.items)
  return _internal_items();
}
inline ::google::protobuf::Map<::int64_t, bool>* NewFlagCacheMap::_internal_mutable_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.items_.MutableMap();
}
inline ::google::protobuf::Map<::int64_t, bool>* NewFlagCacheMap::mutable_items() {
  // @@protoc_insertion_point(field_mutable_map:Digit.Prime.NewFlags.NewFlagCacheMap.items)
  return _internal_mutable_items();
}

// map<int64, int32> itemFlags = 2;
inline int NewFlagCacheMap::_internal_itemflags_size() const {
  return _internal_itemflags().size();
}
inline int NewFlagCacheMap::itemflags_size() const {
  return _internal_itemflags_size();
}
inline void NewFlagCacheMap::clear_itemflags() {
  _impl_.itemflags_.Clear();
}
inline const ::google::protobuf::Map<::int64_t, ::int32_t>& NewFlagCacheMap::_internal_itemflags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.itemflags_.GetMap();
}
inline const ::google::protobuf::Map<::int64_t, ::int32_t>& NewFlagCacheMap::itemflags() const {
  // @@protoc_insertion_point(field_map:Digit.Prime.NewFlags.NewFlagCacheMap.itemFlags)
  return _internal_itemflags();
}
inline ::google::protobuf::Map<::int64_t, ::int32_t>* NewFlagCacheMap::_internal_mutable_itemflags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.itemflags_.MutableMap();
}
inline ::google::protobuf::Map<::int64_t, ::int32_t>* NewFlagCacheMap::mutable_itemflags() {
  // @@protoc_insertion_point(field_mutable_map:Digit.Prime.NewFlags.NewFlagCacheMap.itemFlags)
  return _internal_mutable_itemflags();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NewFlagDataCache

// map<int32, .Digit.Prime.NewFlags.NewFlagCacheMap> categories = 1;
inline int NewFlagDataCache::_internal_categories_size() const {
  return _internal_categories().size();
}
inline int NewFlagDataCache::categories_size() const {
  return _internal_categories_size();
}
inline void NewFlagDataCache::clear_categories() {
  _impl_.categories_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap>& NewFlagDataCache::_internal_categories() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.categories_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap>& NewFlagDataCache::categories() const {
  // @@protoc_insertion_point(field_map:Digit.Prime.NewFlags.NewFlagDataCache.categories)
  return _internal_categories();
}
inline ::google::protobuf::Map<::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap>* NewFlagDataCache::_internal_mutable_categories() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.categories_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::Digit::Prime::NewFlags::NewFlagCacheMap>* NewFlagDataCache::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_map:Digit.Prime.NewFlags.NewFlagDataCache.categories)
  return _internal_mutable_categories();
}

// int32 version = 2;
inline void NewFlagDataCache::clear_version() {
  _impl_.version_ = 0;
}
inline ::int32_t NewFlagDataCache::version() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.NewFlags.NewFlagDataCache.version)
  return _internal_version();
}
inline void NewFlagDataCache::set_version(::int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.NewFlags.NewFlagDataCache.version)
}
inline ::int32_t NewFlagDataCache::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_;
}
inline void NewFlagDataCache::_internal_set_version(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace NewFlags
}  // namespace Prime
}  // namespace Digit


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eNewFlags_2eproto_2epb_2eh
