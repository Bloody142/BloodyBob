// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Digit.Prime.Inventories.proto

#include "Digit.Prime.Inventories.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Digit {
namespace Prime {
namespace Inventories {
        template <typename>
PROTOBUF_CONSTEXPR InventoryGroup::InventoryGroup(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.supportedsubtypes_)*/ {},
      /*decltype(_impl_._supportedsubtypes_cached_byte_size_)*/ {0},
      /*decltype(_impl_.idrefs_)*/ nullptr,
      /*decltype(_impl_.groupid_)*/ 0,
      /*decltype(_impl_.sortingorder_)*/ 0,
      /*decltype(_impl_.grade_)*/ 0,
      /*decltype(_impl_.tab_)*/ 0,
    } {}
struct InventoryGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryGroupDefaultTypeInternal() {}
  union {
    InventoryGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryGroupDefaultTypeInternal _InventoryGroup_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR InventoryGrouping_GroupingEntry_DoNotUse::InventoryGrouping_GroupingEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InventoryGrouping_GroupingEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal _InventoryGrouping_GroupingEntry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR InventoryGrouping::InventoryGrouping(::_pbi::ConstantInitialized)
    : _impl_{
      /* decltype(_impl_.grouping_) */ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct InventoryGroupingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryGroupingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryGroupingDefaultTypeInternal() {}
  union {
    InventoryGrouping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryGroupingDefaultTypeInternal _InventoryGrouping_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR InventoryGroupList::InventoryGroupList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.groups_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct InventoryGroupListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryGroupListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryGroupListDefaultTypeInternal() {}
  union {
    InventoryGroupList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryGroupListDefaultTypeInternal _InventoryGroupList_default_instance_;
}  // namespace Inventories
}  // namespace Prime
}  // namespace Digit
static ::_pb::Metadata file_level_metadata_Digit_2ePrime_2eInventories_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Digit_2ePrime_2eInventories_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Digit_2ePrime_2eInventories_2eproto = nullptr;
const ::uint32_t TableStruct_Digit_2ePrime_2eInventories_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroup, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroup, _impl_.groupid_),
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroup, _impl_.supportedsubtypes_),
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroup, _impl_.sortingorder_),
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroup, _impl_.grade_),
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroup, _impl_.idrefs_),
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroup, _impl_.tab_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGrouping_GroupingEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGrouping_GroupingEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGrouping_GroupingEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGrouping_GroupingEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGrouping, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGrouping, _impl_.grouping_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroupList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Digit::Prime::Inventories::InventoryGroupList, _impl_.groups_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::Digit::Prime::Inventories::InventoryGroup)},
        {20, 30, -1, sizeof(::Digit::Prime::Inventories::InventoryGrouping_GroupingEntry_DoNotUse)},
        {32, -1, -1, sizeof(::Digit::Prime::Inventories::InventoryGrouping)},
        {41, -1, -1, sizeof(::Digit::Prime::Inventories::InventoryGroupList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Digit::Prime::Inventories::_InventoryGroup_default_instance_._instance,
    &::Digit::Prime::Inventories::_InventoryGrouping_GroupingEntry_DoNotUse_default_instance_._instance,
    &::Digit::Prime::Inventories::_InventoryGrouping_default_instance_._instance,
    &::Digit::Prime::Inventories::_InventoryGroupList_default_instance_._instance,
};
const char descriptor_table_protodef_Digit_2ePrime_2eInventories_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035Digit.Prime.Inventories.proto\022\027Digit.P"
    "rime.Inventories\032\036Digit.PrimeServer.Mode"
    "ls.proto\"\370\001\n\016InventoryGroup\022\017\n\007groupId\030\001"
    " \001(\005\022C\n\021supportedSubtypes\030\002 \003(\0162(.Digit."
    "Prime.Inventories.ResourceSubtype\022\024\n\014sor"
    "tingOrder\030\003 \001(\005\022\r\n\005grade\030\004 \001(\005\0220\n\006idRefs"
    "\030\005 \001(\0132 .Digit.PrimeServer.Models.IdRefs"
    "\0229\n\003tab\030\006 \001(\0162,.Digit.Prime.Inventories."
    "InventoryTabOptions\"\275\001\n\021InventoryGroupin"
    "g\022J\n\010grouping\030\001 \003(\01328.Digit.Prime.Invent"
    "ories.InventoryGrouping.GroupingEntry\032\\\n"
    "\rGroupingEntry\022\013\n\003key\030\001 \001(\005\022:\n\005value\030\002 \001"
    "(\0132+.Digit.Prime.Inventories.InventoryGr"
    "oupList:\0028\001\"M\n\022InventoryGroupList\0227\n\006gro"
    "ups\030\001 \003(\0132\'.Digit.Prime.Inventories.Inve"
    "ntoryGroup*\223\003\n\023InventoryTabOptions\022\034\n\030IN"
    "VENTORYTABOPTIONS_NONE\020\000\022(\n\033INVENTORYTAB"
    "OPTIONS_INVALID\020\377\377\377\377\377\377\377\377\377\001\022&\n\036INVENTORYT"
    "ABOPTIONS_LOOTCRATES\020\370\213\340\331\004\022)\n\034INVENTORYT"
    "ABOPTIONS_SPEEDUPS\020\261\337\315\246\370\377\377\377\377\001\022*\n\035INVENTO"
    "RYTABOPTIONS_MATERIALS\020\214\300\255\200\372\377\377\377\377\001\022(\n\033INV"
    "ENTORYTABOPTIONS_SPECIAL\020\231\261\207\334\376\377\377\377\377\001\0220\n#I"
    "NVENTORYTABOPTIONS_RESOURCEBATCHES\020\332\372\225\265\375"
    "\377\377\377\377\001\022+\n$INVENTORYTABOPTIONS_TERRITORYCA"
    "PTURE\020\214\344\336u\022,\n\037INVENTORYTABOPTIONS_CONSUM"
    "ABLES\020\302\356\335\361\372\377\377\377\377\001*\262\004\n\017ResourceSubtype\022\030\n\024"
    "RESOURCESUBTYPE_NONE\020\000\022\030\n\024RESOURCESUBTYP"
    "E_SOFT\020\001\022\030\n\024RESOURCESUBTYPE_HARD\020\002\022\037\n\033RE"
    "SOURCESUBTYPE_RAWMATERIAL\020\003\022#\n\037RESOURCES"
    "UBTYPE_REFINEDMATERIAL\020\004\022\031\n\025RESOURCESUBT"
    "YPE_TOKEN\020\005\022\031\n\025RESOURCESUBTYPE_INTEL\020\006\022 "
    "\n\034RESOURCESUBTYPE_FACTIONPOINT\020\007\022 \n\034RESO"
    "URCESUBTYPE_SPEEDUPTOKEN\020\010\022!\n\035RESOURCESU"
    "BTYPE_RESOURCEBATCH\020\t\022\031\n\025RESOURCESUBTYPE"
    "_DAILY\020\n\022\034\n\030RESOURCESUBTYPE_MATERIAL\020\013\022$"
    "\n RESOURCESUBTYPE_PEACESHIELDTOKEN\020\014\022\037\n\033"
    "RESOURCESUBTYPE_PEACESHIELD\020\r\022$\n RESOURC"
    "ESUBTYPE_SCRAPPEDMATERIAL\020\016\022$\n RESOURCES"
    "UBTYPE_TERRITORYCAPTURE\020\017\022\"\n\036RESOURCESUB"
    "TYPE_COSMETICSSHARD\020\020b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_Digit_2ePrime_2eInventories_2eproto_deps[1] =
    {
        &::descriptor_table_Digit_2ePrimeServer_2eModels_2eproto,
};
static ::absl::once_flag descriptor_table_Digit_2ePrime_2eInventories_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Digit_2ePrime_2eInventories_2eproto = {
    false,
    false,
    1589,
    descriptor_table_protodef_Digit_2ePrime_2eInventories_2eproto,
    "Digit.Prime.Inventories.proto",
    &descriptor_table_Digit_2ePrime_2eInventories_2eproto_once,
    descriptor_table_Digit_2ePrime_2eInventories_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_Digit_2ePrime_2eInventories_2eproto::offsets,
    file_level_metadata_Digit_2ePrime_2eInventories_2eproto,
    file_level_enum_descriptors_Digit_2ePrime_2eInventories_2eproto,
    file_level_service_descriptors_Digit_2ePrime_2eInventories_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Digit_2ePrime_2eInventories_2eproto_getter() {
  return &descriptor_table_Digit_2ePrime_2eInventories_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Digit_2ePrime_2eInventories_2eproto(&descriptor_table_Digit_2ePrime_2eInventories_2eproto);
namespace Digit {
namespace Prime {
namespace Inventories {
const ::google::protobuf::EnumDescriptor* InventoryTabOptions_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Digit_2ePrime_2eInventories_2eproto);
  return file_level_enum_descriptors_Digit_2ePrime_2eInventories_2eproto[0];
}
bool InventoryTabOptions_IsValid(int value) {
  switch (value) {
    case -2066518095:
    case -1609867252:
    case -1372096702:
    case -693797542:
    case -343811943:
    case -1:
    case 0:
    case 246919692:
    case 1261962744:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* ResourceSubtype_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Digit_2ePrime_2eInventories_2eproto);
  return file_level_enum_descriptors_Digit_2ePrime_2eInventories_2eproto[1];
}
bool ResourceSubtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class InventoryGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<InventoryGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_._has_bits_);
  static const ::Digit::PrimeServer::Models::IdRefs& idrefs(const InventoryGroup* msg);
  static void set_has_idrefs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Digit::PrimeServer::Models::IdRefs& InventoryGroup::_Internal::idrefs(const InventoryGroup* msg) {
  return *msg->_impl_.idrefs_;
}
void InventoryGroup::clear_idrefs() {
  if (_impl_.idrefs_ != nullptr) _impl_.idrefs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InventoryGroup::InventoryGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Digit.Prime.Inventories.InventoryGroup)
}
InventoryGroup::InventoryGroup(const InventoryGroup& from) : ::google::protobuf::Message() {
  InventoryGroup* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.supportedsubtypes_){from._internal_supportedsubtypes()},
      /*decltype(_impl_._supportedsubtypes_cached_byte_size_)*/ {0},
      decltype(_impl_.idrefs_){nullptr},
      decltype(_impl_.groupid_){},
      decltype(_impl_.sortingorder_){},
      decltype(_impl_.grade_){},
      decltype(_impl_.tab_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.idrefs_ = new ::Digit::PrimeServer::Models::IdRefs(*from._impl_.idrefs_);
  }
  ::memcpy(&_impl_.groupid_, &from._impl_.groupid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tab_) -
    reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.tab_));

  // @@protoc_insertion_point(copy_constructor:Digit.Prime.Inventories.InventoryGroup)
}
inline void InventoryGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.supportedsubtypes_){arena},
      /*decltype(_impl_._supportedsubtypes_cached_byte_size_)*/ {0},
      decltype(_impl_.idrefs_){nullptr},
      decltype(_impl_.groupid_){0},
      decltype(_impl_.sortingorder_){0},
      decltype(_impl_.grade_){0},
      decltype(_impl_.tab_){0},
  };
}
InventoryGroup::~InventoryGroup() {
  // @@protoc_insertion_point(destructor:Digit.Prime.Inventories.InventoryGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InventoryGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_supportedsubtypes()->~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.idrefs_;
}
void InventoryGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void InventoryGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Digit.Prime.Inventories.InventoryGroup)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_supportedsubtypes()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.idrefs_ != nullptr);
    _impl_.idrefs_->Clear();
  }
  ::memset(&_impl_.groupid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tab_) -
      reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.tab_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InventoryGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> InventoryGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InventoryGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 groupId = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InventoryGroup, _impl_.groupid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.groupid_)}},
    // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.supportedsubtypes_)}},
    // int32 sortingOrder = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InventoryGroup, _impl_.sortingorder_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.sortingorder_)}},
    // int32 grade = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InventoryGroup, _impl_.grade_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.grade_)}},
    // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.idrefs_)}},
    // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InventoryGroup, _impl_.tab_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.tab_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 groupId = 1;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.groupid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.supportedsubtypes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // int32 sortingOrder = 3;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.sortingorder_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 grade = 4;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.grade_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.idrefs_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.tab_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Digit::PrimeServer::Models::IdRefs>()},
  }}, {{
  }},
};

::uint8_t* InventoryGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Digit.Prime.Inventories.InventoryGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_groupid(), target);
  }

  // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
  {
    int byte_size = _impl_._supportedsubtypes_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(2, _internal_supportedsubtypes(),
                                       byte_size, target);
    }
  }

  // int32 sortingOrder = 3;
  if (this->_internal_sortingorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_sortingorder(), target);
  }

  // int32 grade = 4;
  if (this->_internal_grade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_grade(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::idrefs(this),
        _Internal::idrefs(this).GetCachedSize(), target, stream);
  }

  // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
  if (this->_internal_tab() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_tab(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Digit.Prime.Inventories.InventoryGroup)
  return target;
}

::size_t InventoryGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Digit.Prime.Inventories.InventoryGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_supportedsubtypes_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_supportedsubtypes().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._supportedsubtypes_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.idrefs_);
  }

  // int32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_groupid());
  }

  // int32 sortingOrder = 3;
  if (this->_internal_sortingorder() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sortingorder());
  }

  // int32 grade = 4;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_grade());
  }

  // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
  if (this->_internal_tab() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tab());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InventoryGroup::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    InventoryGroup::MergeImpl
};
const ::google::protobuf::Message::ClassData*InventoryGroup::GetClassData() const { return &_class_data_; }


void InventoryGroup::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InventoryGroup*>(&to_msg);
  auto& from = static_cast<const InventoryGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Digit.Prime.Inventories.InventoryGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_supportedsubtypes()->MergeFrom(from._internal_supportedsubtypes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_idrefs()->::Digit::PrimeServer::Models::IdRefs::MergeFrom(
        from._internal_idrefs());
  }
  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_sortingorder() != 0) {
    _this->_internal_set_sortingorder(from._internal_sortingorder());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  if (from._internal_tab() != 0) {
    _this->_internal_set_tab(from._internal_tab());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InventoryGroup::CopyFrom(const InventoryGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Digit.Prime.Inventories.InventoryGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InventoryGroup::IsInitialized() const {
  return true;
}

void InventoryGroup::InternalSwap(InventoryGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.supportedsubtypes_.InternalSwap(&other->_impl_.supportedsubtypes_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.tab_)
      + sizeof(InventoryGroup::_impl_.tab_)
      - PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.idrefs_)>(
          reinterpret_cast<char*>(&_impl_.idrefs_),
          reinterpret_cast<char*>(&other->_impl_.idrefs_));
}

::google::protobuf::Metadata InventoryGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Digit_2ePrime_2eInventories_2eproto_getter, &descriptor_table_Digit_2ePrime_2eInventories_2eproto_once,
      file_level_metadata_Digit_2ePrime_2eInventories_2eproto[0]);
}
// ===================================================================

InventoryGrouping_GroupingEntry_DoNotUse::InventoryGrouping_GroupingEntry_DoNotUse() {}
InventoryGrouping_GroupingEntry_DoNotUse::InventoryGrouping_GroupingEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void InventoryGrouping_GroupingEntry_DoNotUse::MergeFrom(const InventoryGrouping_GroupingEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata InventoryGrouping_GroupingEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Digit_2ePrime_2eInventories_2eproto_getter, &descriptor_table_Digit_2ePrime_2eInventories_2eproto_once,
      file_level_metadata_Digit_2ePrime_2eInventories_2eproto[1]);
}
// ===================================================================

class InventoryGrouping::_Internal {
 public:
};

InventoryGrouping::InventoryGrouping(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Digit.Prime.Inventories.InventoryGrouping)
}
InventoryGrouping::InventoryGrouping(const InventoryGrouping& from) : ::google::protobuf::Message() {
  InventoryGrouping* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      /* decltype(_impl_.grouping_) */ {},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.grouping_.MergeFrom(from._impl_.grouping_);

  // @@protoc_insertion_point(copy_constructor:Digit.Prime.Inventories.InventoryGrouping)
}
inline void InventoryGrouping::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /* decltype(_impl_.grouping_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
InventoryGrouping::~InventoryGrouping() {
  // @@protoc_insertion_point(destructor:Digit.Prime.Inventories.InventoryGrouping)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InventoryGrouping::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grouping_.~MapField();
}
void InventoryGrouping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void InventoryGrouping::Clear() {
// @@protoc_insertion_point(message_clear_start:Digit.Prime.Inventories.InventoryGrouping)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grouping_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InventoryGrouping::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 2, 0, 2> InventoryGrouping::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InventoryGrouping_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<int32, .Digit.Prime.Inventories.InventoryGroupList> grouping = 1;
    {PROTOBUF_FIELD_OFFSET(InventoryGrouping, _impl_.grouping_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<decltype(InventoryGrouping()._impl_.grouping_)>(1, 0, 0)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::Digit::Prime::Inventories::InventoryGroupList>},
  }}, {{
  }},
};

::uint8_t* InventoryGrouping::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Digit.Prime.Inventories.InventoryGrouping)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // map<int32, .Digit.Prime.Inventories.InventoryGroupList> grouping = 1;
  if (!_internal_grouping().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>;
    using WireHelper = InventoryGrouping_GroupingEntry_DoNotUse::Funcs;
    const auto& field = _internal_grouping();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Digit.Prime.Inventories.InventoryGrouping)
  return target;
}

::size_t InventoryGrouping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Digit.Prime.Inventories.InventoryGrouping)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .Digit.Prime.Inventories.InventoryGroupList> grouping = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_grouping_size());
  for (const auto& entry : _internal_grouping()) {
    total_size += InventoryGrouping_GroupingEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InventoryGrouping::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    InventoryGrouping::MergeImpl
};
const ::google::protobuf::Message::ClassData*InventoryGrouping::GetClassData() const { return &_class_data_; }


void InventoryGrouping::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InventoryGrouping*>(&to_msg);
  auto& from = static_cast<const InventoryGrouping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Digit.Prime.Inventories.InventoryGrouping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.grouping_.MergeFrom(from._impl_.grouping_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InventoryGrouping::CopyFrom(const InventoryGrouping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Digit.Prime.Inventories.InventoryGrouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InventoryGrouping::IsInitialized() const {
  return true;
}

void InventoryGrouping::InternalSwap(InventoryGrouping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.grouping_.InternalSwap(&other->_impl_.grouping_);
}

::google::protobuf::Metadata InventoryGrouping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Digit_2ePrime_2eInventories_2eproto_getter, &descriptor_table_Digit_2ePrime_2eInventories_2eproto_once,
      file_level_metadata_Digit_2ePrime_2eInventories_2eproto[2]);
}
// ===================================================================

class InventoryGroupList::_Internal {
 public:
};

InventoryGroupList::InventoryGroupList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Digit.Prime.Inventories.InventoryGroupList)
}
InventoryGroupList::InventoryGroupList(const InventoryGroupList& from) : ::google::protobuf::Message() {
  InventoryGroupList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){from._impl_.groups_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Digit.Prime.Inventories.InventoryGroupList)
}
inline void InventoryGroupList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
InventoryGroupList::~InventoryGroupList() {
  // @@protoc_insertion_point(destructor:Digit.Prime.Inventories.InventoryGroupList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InventoryGroupList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.~RepeatedPtrField();
}
void InventoryGroupList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void InventoryGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:Digit.Prime.Inventories.InventoryGroupList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groups()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InventoryGroupList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> InventoryGroupList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InventoryGroupList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroupList, _impl_.groups_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
    {PROTOBUF_FIELD_OFFSET(InventoryGroupList, _impl_.groups_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Digit::Prime::Inventories::InventoryGroup>()},
  }}, {{
  }},
};

::uint8_t* InventoryGroupList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Digit.Prime.Inventories.InventoryGroupList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Digit.Prime.Inventories.InventoryGroupList)
  return target;
}

::size_t InventoryGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Digit.Prime.Inventories.InventoryGroupList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_internal_groups()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InventoryGroupList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    InventoryGroupList::MergeImpl
};
const ::google::protobuf::Message::ClassData*InventoryGroupList::GetClassData() const { return &_class_data_; }


void InventoryGroupList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InventoryGroupList*>(&to_msg);
  auto& from = static_cast<const InventoryGroupList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Digit.Prime.Inventories.InventoryGroupList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groups()->MergeFrom(from._internal_groups());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InventoryGroupList::CopyFrom(const InventoryGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Digit.Prime.Inventories.InventoryGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InventoryGroupList::IsInitialized() const {
  return true;
}

void InventoryGroupList::InternalSwap(InventoryGroupList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
}

::google::protobuf::Metadata InventoryGroupList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Digit_2ePrime_2eInventories_2eproto_getter, &descriptor_table_Digit_2ePrime_2eInventories_2eproto_once,
      file_level_metadata_Digit_2ePrime_2eInventories_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace Inventories
}  // namespace Prime
}  // namespace Digit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
