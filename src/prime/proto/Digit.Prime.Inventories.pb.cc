// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Digit.Prime.Inventories.proto

#include "Digit.Prime.Inventories.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Digit {
namespace Prime {
namespace Inventories {
        template <typename>
PROTOBUF_CONSTEXPR InventoryGroup::InventoryGroup(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.supportedsubtypes_)*/ {},
      /*decltype(_impl_._supportedsubtypes_cached_byte_size_)*/ {0},
      /*decltype(_impl_.idrefs_)*/ nullptr,
      /*decltype(_impl_.groupid_)*/ 0,
      /*decltype(_impl_.sortingorder_)*/ 0,
      /*decltype(_impl_.grade_)*/ 0,
      /*decltype(_impl_.tab_)*/ 0,
    } {}
struct InventoryGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryGroupDefaultTypeInternal() {}
  union {
    InventoryGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryGroupDefaultTypeInternal _InventoryGroup_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR InventoryGrouping_GroupingEntry_DoNotUse::InventoryGrouping_GroupingEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InventoryGrouping_GroupingEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal _InventoryGrouping_GroupingEntry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR InventoryGrouping::InventoryGrouping(::_pbi::ConstantInitialized)
    : _impl_{
      /* decltype(_impl_.grouping_) */ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct InventoryGroupingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryGroupingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryGroupingDefaultTypeInternal() {}
  union {
    InventoryGrouping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryGroupingDefaultTypeInternal _InventoryGrouping_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR InventoryGroupList::InventoryGroupList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.groups_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct InventoryGroupListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryGroupListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryGroupListDefaultTypeInternal() {}
  union {
    InventoryGroupList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryGroupListDefaultTypeInternal _InventoryGroupList_default_instance_;
}  // namespace Inventories
}  // namespace Prime
}  // namespace Digit
namespace Digit {
namespace Prime {
namespace Inventories {
bool InventoryTabOptions_IsValid(int value) {
  switch (value) {
    case -2066518095:
    case -1609867252:
    case -1372096702:
    case -693797542:
    case -343811943:
    case -1:
    case 0:
    case 246919692:
    case 1261962744:
      return true;
    default:
      return false;
  }
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    InventoryTabOptions_strings[9] = {};

static const char InventoryTabOptions_names[] = {
    "INVENTORYTABOPTIONS_CONSUMABLES"
    "INVENTORYTABOPTIONS_INVALID"
    "INVENTORYTABOPTIONS_LOOTCRATES"
    "INVENTORYTABOPTIONS_MATERIALS"
    "INVENTORYTABOPTIONS_NONE"
    "INVENTORYTABOPTIONS_RESOURCEBATCHES"
    "INVENTORYTABOPTIONS_SPECIAL"
    "INVENTORYTABOPTIONS_SPEEDUPS"
    "INVENTORYTABOPTIONS_TERRITORYCAPTURE"
};

static const ::google::protobuf::internal::EnumEntry InventoryTabOptions_entries[] =
    {
        {{&InventoryTabOptions_names[0], 31}, -1372096702},
        {{&InventoryTabOptions_names[31], 27}, -1},
        {{&InventoryTabOptions_names[58], 30}, 1261962744},
        {{&InventoryTabOptions_names[88], 29}, -1609867252},
        {{&InventoryTabOptions_names[117], 24}, 0},
        {{&InventoryTabOptions_names[141], 35}, -693797542},
        {{&InventoryTabOptions_names[176], 27}, -343811943},
        {{&InventoryTabOptions_names[203], 28}, -2066518095},
        {{&InventoryTabOptions_names[231], 36}, 246919692},
};

static const int InventoryTabOptions_entries_by_number[] = {
    7,  // -2066518095 -> INVENTORYTABOPTIONS_SPEEDUPS
    3,  // -1609867252 -> INVENTORYTABOPTIONS_MATERIALS
    0,  // -1372096702 -> INVENTORYTABOPTIONS_CONSUMABLES
    5,  // -693797542 -> INVENTORYTABOPTIONS_RESOURCEBATCHES
    6,  // -343811943 -> INVENTORYTABOPTIONS_SPECIAL
    1,  // -1 -> INVENTORYTABOPTIONS_INVALID
    4,  // 0 -> INVENTORYTABOPTIONS_NONE
    8,  // 246919692 -> INVENTORYTABOPTIONS_TERRITORYCAPTURE
    2,  // 1261962744 -> INVENTORYTABOPTIONS_LOOTCRATES
};

const std::string& InventoryTabOptions_Name(InventoryTabOptions value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          InventoryTabOptions_entries, InventoryTabOptions_entries_by_number,
          9, InventoryTabOptions_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      InventoryTabOptions_entries, InventoryTabOptions_entries_by_number, 9,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : InventoryTabOptions_strings[idx].get();
}

bool InventoryTabOptions_Parse(absl::string_view name, InventoryTabOptions* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      InventoryTabOptions_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<InventoryTabOptions>(int_value);
  }
  return success;
}
bool ResourceSubtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    ResourceSubtype_strings[17] = {};

static const char ResourceSubtype_names[] = {
    "RESOURCESUBTYPE_COSMETICSSHARD"
    "RESOURCESUBTYPE_DAILY"
    "RESOURCESUBTYPE_FACTIONPOINT"
    "RESOURCESUBTYPE_HARD"
    "RESOURCESUBTYPE_INTEL"
    "RESOURCESUBTYPE_MATERIAL"
    "RESOURCESUBTYPE_NONE"
    "RESOURCESUBTYPE_PEACESHIELD"
    "RESOURCESUBTYPE_PEACESHIELDTOKEN"
    "RESOURCESUBTYPE_RAWMATERIAL"
    "RESOURCESUBTYPE_REFINEDMATERIAL"
    "RESOURCESUBTYPE_RESOURCEBATCH"
    "RESOURCESUBTYPE_SCRAPPEDMATERIAL"
    "RESOURCESUBTYPE_SOFT"
    "RESOURCESUBTYPE_SPEEDUPTOKEN"
    "RESOURCESUBTYPE_TERRITORYCAPTURE"
    "RESOURCESUBTYPE_TOKEN"
};

static const ::google::protobuf::internal::EnumEntry ResourceSubtype_entries[] =
    {
        {{&ResourceSubtype_names[0], 30}, 16},
        {{&ResourceSubtype_names[30], 21}, 10},
        {{&ResourceSubtype_names[51], 28}, 7},
        {{&ResourceSubtype_names[79], 20}, 2},
        {{&ResourceSubtype_names[99], 21}, 6},
        {{&ResourceSubtype_names[120], 24}, 11},
        {{&ResourceSubtype_names[144], 20}, 0},
        {{&ResourceSubtype_names[164], 27}, 13},
        {{&ResourceSubtype_names[191], 32}, 12},
        {{&ResourceSubtype_names[223], 27}, 3},
        {{&ResourceSubtype_names[250], 31}, 4},
        {{&ResourceSubtype_names[281], 29}, 9},
        {{&ResourceSubtype_names[310], 32}, 14},
        {{&ResourceSubtype_names[342], 20}, 1},
        {{&ResourceSubtype_names[362], 28}, 8},
        {{&ResourceSubtype_names[390], 32}, 15},
        {{&ResourceSubtype_names[422], 21}, 5},
};

static const int ResourceSubtype_entries_by_number[] = {
    6,  // 0 -> RESOURCESUBTYPE_NONE
    13,  // 1 -> RESOURCESUBTYPE_SOFT
    3,  // 2 -> RESOURCESUBTYPE_HARD
    9,  // 3 -> RESOURCESUBTYPE_RAWMATERIAL
    10,  // 4 -> RESOURCESUBTYPE_REFINEDMATERIAL
    16,  // 5 -> RESOURCESUBTYPE_TOKEN
    4,  // 6 -> RESOURCESUBTYPE_INTEL
    2,  // 7 -> RESOURCESUBTYPE_FACTIONPOINT
    14,  // 8 -> RESOURCESUBTYPE_SPEEDUPTOKEN
    11,  // 9 -> RESOURCESUBTYPE_RESOURCEBATCH
    1,  // 10 -> RESOURCESUBTYPE_DAILY
    5,  // 11 -> RESOURCESUBTYPE_MATERIAL
    8,  // 12 -> RESOURCESUBTYPE_PEACESHIELDTOKEN
    7,  // 13 -> RESOURCESUBTYPE_PEACESHIELD
    12,  // 14 -> RESOURCESUBTYPE_SCRAPPEDMATERIAL
    15,  // 15 -> RESOURCESUBTYPE_TERRITORYCAPTURE
    0,  // 16 -> RESOURCESUBTYPE_COSMETICSSHARD
};

const std::string& ResourceSubtype_Name(ResourceSubtype value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          ResourceSubtype_entries, ResourceSubtype_entries_by_number,
          17, ResourceSubtype_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      ResourceSubtype_entries, ResourceSubtype_entries_by_number, 17,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : ResourceSubtype_strings[idx].get();
}

bool ResourceSubtype_Parse(absl::string_view name, ResourceSubtype* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      ResourceSubtype_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<ResourceSubtype>(int_value);
  }
  return success;
}
// ===================================================================

class InventoryGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<InventoryGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_._has_bits_);
  static const ::Digit::PrimeServer::Models::IdRefs& idrefs(const InventoryGroup* msg);
  static void set_has_idrefs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Digit::PrimeServer::Models::IdRefs& InventoryGroup::_Internal::idrefs(const InventoryGroup* msg) {
  return *msg->_impl_.idrefs_;
}
void InventoryGroup::clear_idrefs() {
  if (_impl_.idrefs_ != nullptr) _impl_.idrefs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InventoryGroup::InventoryGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Digit.Prime.Inventories.InventoryGroup)
}
InventoryGroup::InventoryGroup(const InventoryGroup& from) : ::google::protobuf::MessageLite() {
  InventoryGroup* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.supportedsubtypes_){from._internal_supportedsubtypes()},
      /*decltype(_impl_._supportedsubtypes_cached_byte_size_)*/ {0},
      decltype(_impl_.idrefs_){nullptr},
      decltype(_impl_.groupid_){},
      decltype(_impl_.sortingorder_){},
      decltype(_impl_.grade_){},
      decltype(_impl_.tab_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.idrefs_ = new ::Digit::PrimeServer::Models::IdRefs(*from._impl_.idrefs_);
  }
  ::memcpy(&_impl_.groupid_, &from._impl_.groupid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tab_) -
    reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.tab_));

  // @@protoc_insertion_point(copy_constructor:Digit.Prime.Inventories.InventoryGroup)
}
inline void InventoryGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.supportedsubtypes_){arena},
      /*decltype(_impl_._supportedsubtypes_cached_byte_size_)*/ {0},
      decltype(_impl_.idrefs_){nullptr},
      decltype(_impl_.groupid_){0},
      decltype(_impl_.sortingorder_){0},
      decltype(_impl_.grade_){0},
      decltype(_impl_.tab_){0},
  };
}
InventoryGroup::~InventoryGroup() {
  // @@protoc_insertion_point(destructor:Digit.Prime.Inventories.InventoryGroup)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void InventoryGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_supportedsubtypes()->~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.idrefs_;
}
void InventoryGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void InventoryGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Digit.Prime.Inventories.InventoryGroup)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_supportedsubtypes()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.idrefs_ != nullptr);
    _impl_.idrefs_->Clear();
  }
  ::memset(&_impl_.groupid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tab_) -
      reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.tab_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InventoryGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> InventoryGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InventoryGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 groupId = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.groupid_)}},
    // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.supportedsubtypes_)}},
    // int32 sortingOrder = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.sortingorder_)}},
    // int32 grade = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.grade_)}},
    // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.idrefs_)}},
    // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.tab_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 groupId = 1;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.groupid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.supportedsubtypes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // int32 sortingOrder = 3;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.sortingorder_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 grade = 4;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.grade_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.idrefs_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
    {PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.tab_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Digit::PrimeServer::Models::IdRefs>()},
  }}, {{
  }},
};

::uint8_t* InventoryGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Digit.Prime.Inventories.InventoryGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_groupid(), target);
  }

  // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
  {
    int byte_size = _impl_._supportedsubtypes_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(2, _internal_supportedsubtypes(),
                                       byte_size, target);
    }
  }

  // int32 sortingOrder = 3;
  if (this->_internal_sortingorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_sortingorder(), target);
  }

  // int32 grade = 4;
  if (this->_internal_grade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_grade(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::idrefs(this),
        _Internal::idrefs(this).GetCachedSize(), target, stream);
  }

  // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
  if (this->_internal_tab() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_tab(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Digit.Prime.Inventories.InventoryGroup)
  return target;
}

::size_t InventoryGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Digit.Prime.Inventories.InventoryGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_supportedsubtypes_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_supportedsubtypes().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._supportedsubtypes_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.idrefs_);
  }

  // int32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_groupid());
  }

  // int32 sortingOrder = 3;
  if (this->_internal_sortingorder() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sortingorder());
  }

  // int32 grade = 4;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_grade());
  }

  // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
  if (this->_internal_tab() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tab());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InventoryGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InventoryGroup*>(
      &from));
}

void InventoryGroup::MergeFrom(const InventoryGroup& from) {
  InventoryGroup* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Digit.Prime.Inventories.InventoryGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_supportedsubtypes()->MergeFrom(from._internal_supportedsubtypes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_idrefs()->::Digit::PrimeServer::Models::IdRefs::MergeFrom(
        from._internal_idrefs());
  }
  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_sortingorder() != 0) {
    _this->_internal_set_sortingorder(from._internal_sortingorder());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  if (from._internal_tab() != 0) {
    _this->_internal_set_tab(from._internal_tab());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InventoryGroup::CopyFrom(const InventoryGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Digit.Prime.Inventories.InventoryGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InventoryGroup::IsInitialized() const {
  return true;
}

void InventoryGroup::InternalSwap(InventoryGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.supportedsubtypes_.InternalSwap(&other->_impl_.supportedsubtypes_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.tab_)
      + sizeof(InventoryGroup::_impl_.tab_)
      - PROTOBUF_FIELD_OFFSET(InventoryGroup, _impl_.idrefs_)>(
          reinterpret_cast<char*>(&_impl_.idrefs_),
          reinterpret_cast<char*>(&other->_impl_.idrefs_));
}

std::string InventoryGroup::GetTypeName() const {
  return "Digit.Prime.Inventories.InventoryGroup";
}

// ===================================================================

InventoryGrouping_GroupingEntry_DoNotUse::InventoryGrouping_GroupingEntry_DoNotUse() {}
InventoryGrouping_GroupingEntry_DoNotUse::InventoryGrouping_GroupingEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void InventoryGrouping_GroupingEntry_DoNotUse::MergeFrom(const InventoryGrouping_GroupingEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
// ===================================================================

class InventoryGrouping::_Internal {
 public:
};

InventoryGrouping::InventoryGrouping(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Digit.Prime.Inventories.InventoryGrouping)
}
InventoryGrouping::InventoryGrouping(const InventoryGrouping& from) : ::google::protobuf::MessageLite() {
  InventoryGrouping* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      /* decltype(_impl_.grouping_) */ {},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _this->_impl_.grouping_.MergeFrom(from._impl_.grouping_);

  // @@protoc_insertion_point(copy_constructor:Digit.Prime.Inventories.InventoryGrouping)
}
inline void InventoryGrouping::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /* decltype(_impl_.grouping_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
InventoryGrouping::~InventoryGrouping() {
  // @@protoc_insertion_point(destructor:Digit.Prime.Inventories.InventoryGrouping)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void InventoryGrouping::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grouping_.~MapFieldLite();
}
void InventoryGrouping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void InventoryGrouping::Clear() {
// @@protoc_insertion_point(message_clear_start:Digit.Prime.Inventories.InventoryGrouping)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grouping_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InventoryGrouping::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 2, 0, 2> InventoryGrouping::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InventoryGrouping_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<int32, .Digit.Prime.Inventories.InventoryGroupList> grouping = 1;
    {PROTOBUF_FIELD_OFFSET(InventoryGrouping, _impl_.grouping_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<decltype(InventoryGrouping()._impl_.grouping_)>(1, 0, 0)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::Digit::Prime::Inventories::InventoryGroupList>},
  }}, {{
  }},
};

::uint8_t* InventoryGrouping::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Digit.Prime.Inventories.InventoryGrouping)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // map<int32, .Digit.Prime.Inventories.InventoryGroupList> grouping = 1;
  if (!_internal_grouping().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>;
    using WireHelper = InventoryGrouping_GroupingEntry_DoNotUse::Funcs;
    const auto& field = _internal_grouping();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Digit.Prime.Inventories.InventoryGrouping)
  return target;
}

::size_t InventoryGrouping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Digit.Prime.Inventories.InventoryGrouping)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .Digit.Prime.Inventories.InventoryGroupList> grouping = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_grouping_size());
  for (const auto& entry : _internal_grouping()) {
    total_size += InventoryGrouping_GroupingEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InventoryGrouping::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InventoryGrouping*>(
      &from));
}

void InventoryGrouping::MergeFrom(const InventoryGrouping& from) {
  InventoryGrouping* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Digit.Prime.Inventories.InventoryGrouping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.grouping_.MergeFrom(from._impl_.grouping_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InventoryGrouping::CopyFrom(const InventoryGrouping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Digit.Prime.Inventories.InventoryGrouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InventoryGrouping::IsInitialized() const {
  return true;
}

void InventoryGrouping::InternalSwap(InventoryGrouping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.grouping_.InternalSwap(&other->_impl_.grouping_);
}

std::string InventoryGrouping::GetTypeName() const {
  return "Digit.Prime.Inventories.InventoryGrouping";
}

// ===================================================================

class InventoryGroupList::_Internal {
 public:
};

InventoryGroupList::InventoryGroupList(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Digit.Prime.Inventories.InventoryGroupList)
}
InventoryGroupList::InventoryGroupList(const InventoryGroupList& from) : ::google::protobuf::MessageLite() {
  InventoryGroupList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){from._impl_.groups_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Digit.Prime.Inventories.InventoryGroupList)
}
inline void InventoryGroupList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
InventoryGroupList::~InventoryGroupList() {
  // @@protoc_insertion_point(destructor:Digit.Prime.Inventories.InventoryGroupList)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void InventoryGroupList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.~RepeatedPtrField();
}
void InventoryGroupList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void InventoryGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:Digit.Prime.Inventories.InventoryGroupList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groups()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InventoryGroupList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> InventoryGroupList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InventoryGroupList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InventoryGroupList, _impl_.groups_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
    {PROTOBUF_FIELD_OFFSET(InventoryGroupList, _impl_.groups_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Digit::Prime::Inventories::InventoryGroup>()},
  }}, {{
  }},
};

::uint8_t* InventoryGroupList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Digit.Prime.Inventories.InventoryGroupList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Digit.Prime.Inventories.InventoryGroupList)
  return target;
}

::size_t InventoryGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Digit.Prime.Inventories.InventoryGroupList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_internal_groups()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InventoryGroupList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InventoryGroupList*>(
      &from));
}

void InventoryGroupList::MergeFrom(const InventoryGroupList& from) {
  InventoryGroupList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Digit.Prime.Inventories.InventoryGroupList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groups()->MergeFrom(from._internal_groups());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InventoryGroupList::CopyFrom(const InventoryGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Digit.Prime.Inventories.InventoryGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InventoryGroupList::IsInitialized() const {
  return true;
}

void InventoryGroupList::InternalSwap(InventoryGroupList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
}

std::string InventoryGroupList::GetTypeName() const {
  return "Digit.Prime.Inventories.InventoryGroupList";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Inventories
}  // namespace Prime
}  // namespace Digit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
