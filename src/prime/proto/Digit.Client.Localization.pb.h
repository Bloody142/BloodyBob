// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Digit.Client.Localization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Digit_2eClient_2eLocalization_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Digit_2eClient_2eLocalization_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Digit_2eClient_2eLocalization_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Digit_2eClient_2eLocalization_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Digit_2eClient_2eLocalization_2eproto;
namespace Digit {
namespace Client {
namespace Localization {
class CachedCategory;
struct CachedCategoryDefaultTypeInternal;
extern CachedCategoryDefaultTypeInternal _CachedCategory_default_instance_;
class CachedCategory_TranslationsEntry_DoNotUse;
struct CachedCategory_TranslationsEntry_DoNotUseDefaultTypeInternal;
extern CachedCategory_TranslationsEntry_DoNotUseDefaultTypeInternal _CachedCategory_TranslationsEntry_DoNotUse_default_instance_;
class CachedTranslation;
struct CachedTranslationDefaultTypeInternal;
extern CachedTranslationDefaultTypeInternal _CachedTranslation_default_instance_;
class CategoryInfo;
struct CategoryInfoDefaultTypeInternal;
extern CategoryInfoDefaultTypeInternal _CategoryInfo_default_instance_;
class LocalizationCacheData;
struct LocalizationCacheDataDefaultTypeInternal;
extern LocalizationCacheDataDefaultTypeInternal _LocalizationCacheData_default_instance_;
class LocalizationCacheData_CategoriesEntry_DoNotUse;
struct LocalizationCacheData_CategoriesEntry_DoNotUseDefaultTypeInternal;
extern LocalizationCacheData_CategoriesEntry_DoNotUseDefaultTypeInternal _LocalizationCacheData_CategoriesEntry_DoNotUse_default_instance_;
}  // namespace Localization
}  // namespace Client
}  // namespace Digit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Digit {
namespace Client {
namespace Localization {
enum ContentIdStatus : int {
  CONTENTIDSTATUS_OK = 0,
  CONTENTIDSTATUS_REQUESTFAILED = 1,
  CONTENTIDSTATUS_MISSINGDATA = 2,
  ContentIdStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ContentIdStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ContentIdStatus_IsValid(int value);
constexpr ContentIdStatus ContentIdStatus_MIN = static_cast<ContentIdStatus>(0);
constexpr ContentIdStatus ContentIdStatus_MAX = static_cast<ContentIdStatus>(2);
constexpr int ContentIdStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ContentIdStatus_descriptor();
template <typename T>
const std::string& ContentIdStatus_Name(T value) {
  static_assert(std::is_same<T, ContentIdStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ContentIdStatus_Name().");
  return ContentIdStatus_Name(static_cast<ContentIdStatus>(value));
}
template <>
inline const std::string& ContentIdStatus_Name(ContentIdStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ContentIdStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ContentIdStatus_Parse(absl::string_view name, ContentIdStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContentIdStatus>(
      ContentIdStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class CachedCategory_TranslationsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<CachedCategory_TranslationsEntry_DoNotUse, 
    ::int64_t, ::Digit::Client::Localization::CachedTranslation,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<CachedCategory_TranslationsEntry_DoNotUse, 
    ::int64_t, ::Digit::Client::Localization::CachedTranslation,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CachedCategory_TranslationsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CachedCategory_TranslationsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CachedCategory_TranslationsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CachedCategory_TranslationsEntry_DoNotUse& other);
  static const CachedCategory_TranslationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CachedCategory_TranslationsEntry_DoNotUse*>(&_CachedCategory_TranslationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Digit_2eClient_2eLocalization_2eproto;
};
// -------------------------------------------------------------------

class CachedCategory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Digit.Client.Localization.CachedCategory) */ {
 public:
  inline CachedCategory() : CachedCategory(nullptr) {}
  ~CachedCategory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CachedCategory(::google::protobuf::internal::ConstantInitialized);

  CachedCategory(const CachedCategory& from);
  CachedCategory(CachedCategory&& from) noexcept
    : CachedCategory() {
    *this = ::std::move(from);
  }

  inline CachedCategory& operator=(const CachedCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedCategory& operator=(CachedCategory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CachedCategory* internal_default_instance() {
    return reinterpret_cast<const CachedCategory*>(
               &_CachedCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CachedCategory& a, CachedCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(CachedCategory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedCategory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedCategory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CachedCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CachedCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CachedCategory& from) {
    CachedCategory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachedCategory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Client.Localization.CachedCategory";
  }
  protected:
  explicit CachedCategory(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTranslationsFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // map<int64, .Digit.Client.Localization.CachedTranslation> translations = 2;
  int translations_size() const;
  private:
  int _internal_translations_size() const;

  public:
  void clear_translations() ;
  const ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedTranslation>& translations() const;
  ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedTranslation>* mutable_translations();

  private:
  const ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedTranslation>& _internal_translations() const;
  ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedTranslation>* _internal_mutable_translations();

  public:
  // .Digit.Client.Localization.CategoryInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::Digit::Client::Localization::CategoryInfo& info() const;
  PROTOBUF_NODISCARD ::Digit::Client::Localization::CategoryInfo* release_info();
  ::Digit::Client::Localization::CategoryInfo* mutable_info();
  void set_allocated_info(::Digit::Client::Localization::CategoryInfo* value);
  void unsafe_arena_set_allocated_info(::Digit::Client::Localization::CategoryInfo* value);
  ::Digit::Client::Localization::CategoryInfo* unsafe_arena_release_info();

  private:
  const ::Digit::Client::Localization::CategoryInfo& _internal_info() const;
  ::Digit::Client::Localization::CategoryInfo* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:Digit.Client.Localization.CachedCategory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<CachedCategory_TranslationsEntry_DoNotUse, ::int64_t, ::Digit::Client::Localization::CachedTranslation,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        translations_;
    ::Digit::Client::Localization::CategoryInfo* info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2eClient_2eLocalization_2eproto;
};// -------------------------------------------------------------------

class CachedTranslation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Digit.Client.Localization.CachedTranslation) */ {
 public:
  inline CachedTranslation() : CachedTranslation(nullptr) {}
  ~CachedTranslation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CachedTranslation(::google::protobuf::internal::ConstantInitialized);

  CachedTranslation(const CachedTranslation& from);
  CachedTranslation(CachedTranslation&& from) noexcept
    : CachedTranslation() {
    *this = ::std::move(from);
  }

  inline CachedTranslation& operator=(const CachedTranslation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedTranslation& operator=(CachedTranslation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedTranslation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CachedTranslation* internal_default_instance() {
    return reinterpret_cast<const CachedTranslation*>(
               &_CachedTranslation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CachedTranslation& a, CachedTranslation& b) {
    a.Swap(&b);
  }
  inline void Swap(CachedTranslation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedTranslation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedTranslation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CachedTranslation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CachedTranslation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CachedTranslation& from) {
    CachedTranslation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachedTranslation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Client.Localization.CachedTranslation";
  }
  protected:
  explicit CachedTranslation(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTextFieldNumber = 3,
    kKeyFieldNumber = 2,
    kStatusFieldNumber = 4,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string text = 3;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // int64 key = 2;
  void clear_key() ;
  ::int64_t key() const;
  void set_key(::int64_t value);

  private:
  ::int64_t _internal_key() const;
  void _internal_set_key(::int64_t value);

  public:
  // .Digit.Client.Localization.ContentIdStatus status = 4;
  void clear_status() ;
  ::Digit::Client::Localization::ContentIdStatus status() const;
  void set_status(::Digit::Client::Localization::ContentIdStatus value);

  private:
  ::Digit::Client::Localization::ContentIdStatus _internal_status() const;
  void _internal_set_status(::Digit::Client::Localization::ContentIdStatus value);

  public:
  // @@protoc_insertion_point(class_scope:Digit.Client.Localization.CachedTranslation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 58, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::int64_t key_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2eClient_2eLocalization_2eproto;
};// -------------------------------------------------------------------

class CategoryInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Digit.Client.Localization.CategoryInfo) */ {
 public:
  inline CategoryInfo() : CategoryInfo(nullptr) {}
  ~CategoryInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CategoryInfo(::google::protobuf::internal::ConstantInitialized);

  CategoryInfo(const CategoryInfo& from);
  CategoryInfo(CategoryInfo&& from) noexcept
    : CategoryInfo() {
    *this = ::std::move(from);
  }

  inline CategoryInfo& operator=(const CategoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryInfo& operator=(CategoryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryInfo* internal_default_instance() {
    return reinterpret_cast<const CategoryInfo*>(
               &_CategoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CategoryInfo& a, CategoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoryInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoryInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CategoryInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CategoryInfo& from) {
    CategoryInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Client.Localization.CategoryInfo";
  }
  protected:
  explicit CategoryInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kIdFieldNumber = 1,
    kDynamicFieldNumber = 3,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // bool dynamic = 3;
  void clear_dynamic() ;
  bool dynamic() const;
  void set_dynamic(bool value);

  private:
  bool _internal_dynamic() const;
  void _internal_set_dynamic(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Digit.Client.Localization.CategoryInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 51, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::Timestamp* timestamp_;
    ::int64_t id_;
    bool dynamic_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2eClient_2eLocalization_2eproto;
};// -------------------------------------------------------------------

class LocalizationCacheData_CategoriesEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<LocalizationCacheData_CategoriesEntry_DoNotUse, 
    ::int64_t, ::Digit::Client::Localization::CachedCategory,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<LocalizationCacheData_CategoriesEntry_DoNotUse, 
    ::int64_t, ::Digit::Client::Localization::CachedCategory,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  LocalizationCacheData_CategoriesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LocalizationCacheData_CategoriesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit LocalizationCacheData_CategoriesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const LocalizationCacheData_CategoriesEntry_DoNotUse& other);
  static const LocalizationCacheData_CategoriesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LocalizationCacheData_CategoriesEntry_DoNotUse*>(&_LocalizationCacheData_CategoriesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Digit_2eClient_2eLocalization_2eproto;
};
// -------------------------------------------------------------------

class LocalizationCacheData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Digit.Client.Localization.LocalizationCacheData) */ {
 public:
  inline LocalizationCacheData() : LocalizationCacheData(nullptr) {}
  ~LocalizationCacheData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocalizationCacheData(::google::protobuf::internal::ConstantInitialized);

  LocalizationCacheData(const LocalizationCacheData& from);
  LocalizationCacheData(LocalizationCacheData&& from) noexcept
    : LocalizationCacheData() {
    *this = ::std::move(from);
  }

  inline LocalizationCacheData& operator=(const LocalizationCacheData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationCacheData& operator=(LocalizationCacheData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalizationCacheData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalizationCacheData* internal_default_instance() {
    return reinterpret_cast<const LocalizationCacheData*>(
               &_LocalizationCacheData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LocalizationCacheData& a, LocalizationCacheData& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizationCacheData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationCacheData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalizationCacheData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalizationCacheData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocalizationCacheData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocalizationCacheData& from) {
    LocalizationCacheData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationCacheData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Client.Localization.LocalizationCacheData";
  }
  protected:
  explicit LocalizationCacheData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 2,
    kLanguageFieldNumber = 1,
  };
  // map<int64, .Digit.Client.Localization.CachedCategory> categories = 2;
  int categories_size() const;
  private:
  int _internal_categories_size() const;

  public:
  void clear_categories() ;
  const ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedCategory>& categories() const;
  ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedCategory>* mutable_categories();

  private:
  const ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedCategory>& _internal_categories() const;
  ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedCategory>* _internal_mutable_categories();

  public:
  // string language = 1;
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* ptr);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // @@protoc_insertion_point(class_scope:Digit.Client.Localization.LocalizationCacheData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 2, 64, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<LocalizationCacheData_CategoriesEntry_DoNotUse, ::int64_t, ::Digit::Client::Localization::CachedCategory,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        categories_;
    ::google::protobuf::internal::ArenaStringPtr language_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2eClient_2eLocalization_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CachedCategory

// .Digit.Client.Localization.CategoryInfo info = 1;
inline bool CachedCategory::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void CachedCategory::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Digit::Client::Localization::CategoryInfo& CachedCategory::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Digit::Client::Localization::CategoryInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Digit::Client::Localization::CategoryInfo&>(::Digit::Client::Localization::_CategoryInfo_default_instance_);
}
inline const ::Digit::Client::Localization::CategoryInfo& CachedCategory::info() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CachedCategory.info)
  return _internal_info();
}
inline void CachedCategory::unsafe_arena_set_allocated_info(::Digit::Client::Localization::CategoryInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::Digit::Client::Localization::CategoryInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Digit.Client.Localization.CachedCategory.info)
}
inline ::Digit::Client::Localization::CategoryInfo* CachedCategory::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Digit::Client::Localization::CategoryInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Digit::Client::Localization::CategoryInfo* CachedCategory::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Client.Localization.CachedCategory.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Digit::Client::Localization::CategoryInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Digit::Client::Localization::CategoryInfo* CachedCategory::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Digit::Client::Localization::CategoryInfo>(GetArenaForAllocation());
    _impl_.info_ = reinterpret_cast<::Digit::Client::Localization::CategoryInfo*>(p);
  }
  return _impl_.info_;
}
inline ::Digit::Client::Localization::CategoryInfo* CachedCategory::mutable_info() {
  ::Digit::Client::Localization::CategoryInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Digit.Client.Localization.CachedCategory.info)
  return _msg;
}
inline void CachedCategory::set_allocated_info(::Digit::Client::Localization::CategoryInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Digit::Client::Localization::CategoryInfo*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Digit::Client::Localization::CategoryInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::Digit::Client::Localization::CategoryInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:Digit.Client.Localization.CachedCategory.info)
}

// map<int64, .Digit.Client.Localization.CachedTranslation> translations = 2;
inline int CachedCategory::_internal_translations_size() const {
  return _internal_translations().size();
}
inline int CachedCategory::translations_size() const {
  return _internal_translations_size();
}
inline void CachedCategory::clear_translations() {
  _impl_.translations_.Clear();
}
inline const ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedTranslation>& CachedCategory::_internal_translations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.translations_.GetMap();
}
inline const ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedTranslation>& CachedCategory::translations() const {
  // @@protoc_insertion_point(field_map:Digit.Client.Localization.CachedCategory.translations)
  return _internal_translations();
}
inline ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedTranslation>* CachedCategory::_internal_mutable_translations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.translations_.MutableMap();
}
inline ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedTranslation>* CachedCategory::mutable_translations() {
  // @@protoc_insertion_point(field_mutable_map:Digit.Client.Localization.CachedCategory.translations)
  return _internal_mutable_translations();
}

// -------------------------------------------------------------------

// CachedTranslation

// string id = 1;
inline void CachedTranslation::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CachedTranslation::id() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CachedTranslation.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CachedTranslation::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Digit.Client.Localization.CachedTranslation.id)
}
inline std::string* CachedTranslation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Digit.Client.Localization.CachedTranslation.id)
  return _s;
}
inline const std::string& CachedTranslation::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void CachedTranslation::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CachedTranslation::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* CachedTranslation::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Client.Localization.CachedTranslation.id)
  return _impl_.id_.Release();
}
inline void CachedTranslation::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Digit.Client.Localization.CachedTranslation.id)
}

// int64 key = 2;
inline void CachedTranslation::clear_key() {
  _impl_.key_ = ::int64_t{0};
}
inline ::int64_t CachedTranslation::key() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CachedTranslation.key)
  return _internal_key();
}
inline void CachedTranslation::set_key(::int64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Digit.Client.Localization.CachedTranslation.key)
}
inline ::int64_t CachedTranslation::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_;
}
inline void CachedTranslation::_internal_set_key(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_ = value;
}

// string text = 3;
inline void CachedTranslation::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& CachedTranslation::text() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CachedTranslation.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CachedTranslation::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Digit.Client.Localization.CachedTranslation.text)
}
inline std::string* CachedTranslation::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:Digit.Client.Localization.CachedTranslation.text)
  return _s;
}
inline const std::string& CachedTranslation::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void CachedTranslation::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CachedTranslation::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* CachedTranslation::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Client.Localization.CachedTranslation.text)
  return _impl_.text_.Release();
}
inline void CachedTranslation::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Digit.Client.Localization.CachedTranslation.text)
}

// .Digit.Client.Localization.ContentIdStatus status = 4;
inline void CachedTranslation::clear_status() {
  _impl_.status_ = 0;
}
inline ::Digit::Client::Localization::ContentIdStatus CachedTranslation::status() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CachedTranslation.status)
  return _internal_status();
}
inline void CachedTranslation::set_status(::Digit::Client::Localization::ContentIdStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Digit.Client.Localization.CachedTranslation.status)
}
inline ::Digit::Client::Localization::ContentIdStatus CachedTranslation::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Digit::Client::Localization::ContentIdStatus>(_impl_.status_);
}
inline void CachedTranslation::_internal_set_status(::Digit::Client::Localization::ContentIdStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CategoryInfo

// int64 id = 1;
inline void CategoryInfo::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t CategoryInfo::id() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CategoryInfo.id)
  return _internal_id();
}
inline void CategoryInfo::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Digit.Client.Localization.CategoryInfo.id)
}
inline ::int64_t CategoryInfo::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CategoryInfo::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 2;
inline void CategoryInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CategoryInfo::name() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CategoryInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CategoryInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Digit.Client.Localization.CategoryInfo.name)
}
inline std::string* CategoryInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Digit.Client.Localization.CategoryInfo.name)
  return _s;
}
inline const std::string& CategoryInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CategoryInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CategoryInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CategoryInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Client.Localization.CategoryInfo.name)
  return _impl_.name_.Release();
}
inline void CategoryInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Digit.Client.Localization.CategoryInfo.name)
}

// bool dynamic = 3;
inline void CategoryInfo::clear_dynamic() {
  _impl_.dynamic_ = false;
}
inline bool CategoryInfo::dynamic() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CategoryInfo.dynamic)
  return _internal_dynamic();
}
inline void CategoryInfo::set_dynamic(bool value) {
  _internal_set_dynamic(value);
  // @@protoc_insertion_point(field_set:Digit.Client.Localization.CategoryInfo.dynamic)
}
inline bool CategoryInfo::_internal_dynamic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dynamic_;
}
inline void CategoryInfo::_internal_set_dynamic(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dynamic_ = value;
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool CategoryInfo::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CategoryInfo::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CategoryInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.CategoryInfo.timestamp)
  return _internal_timestamp();
}
inline void CategoryInfo::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Digit.Client.Localization.CategoryInfo.timestamp)
}
inline ::google::protobuf::Timestamp* CategoryInfo::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* CategoryInfo::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Client.Localization.CategoryInfo.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CategoryInfo::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* CategoryInfo::mutable_timestamp() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:Digit.Client.Localization.CategoryInfo.timestamp)
  return _msg;
}
inline void CategoryInfo::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:Digit.Client.Localization.CategoryInfo.timestamp)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LocalizationCacheData

// string language = 1;
inline void LocalizationCacheData::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& LocalizationCacheData::language() const {
  // @@protoc_insertion_point(field_get:Digit.Client.Localization.LocalizationCacheData.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalizationCacheData::set_language(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Digit.Client.Localization.LocalizationCacheData.language)
}
inline std::string* LocalizationCacheData::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:Digit.Client.Localization.LocalizationCacheData.language)
  return _s;
}
inline const std::string& LocalizationCacheData::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_.Get();
}
inline void LocalizationCacheData::_internal_set_language(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalizationCacheData::_internal_mutable_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_.Mutable( GetArenaForAllocation());
}
inline std::string* LocalizationCacheData::release_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Client.Localization.LocalizationCacheData.language)
  return _impl_.language_.Release();
}
inline void LocalizationCacheData::set_allocated_language(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_.IsDefault()) {
          _impl_.language_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Digit.Client.Localization.LocalizationCacheData.language)
}

// map<int64, .Digit.Client.Localization.CachedCategory> categories = 2;
inline int LocalizationCacheData::_internal_categories_size() const {
  return _internal_categories().size();
}
inline int LocalizationCacheData::categories_size() const {
  return _internal_categories_size();
}
inline void LocalizationCacheData::clear_categories() {
  _impl_.categories_.Clear();
}
inline const ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedCategory>& LocalizationCacheData::_internal_categories() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.categories_.GetMap();
}
inline const ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedCategory>& LocalizationCacheData::categories() const {
  // @@protoc_insertion_point(field_map:Digit.Client.Localization.LocalizationCacheData.categories)
  return _internal_categories();
}
inline ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedCategory>* LocalizationCacheData::_internal_mutable_categories() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.categories_.MutableMap();
}
inline ::google::protobuf::Map<::int64_t, ::Digit::Client::Localization::CachedCategory>* LocalizationCacheData::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_map:Digit.Client.Localization.LocalizationCacheData.categories)
  return _internal_mutable_categories();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Localization
}  // namespace Client
}  // namespace Digit


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Digit::Client::Localization::ContentIdStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Digit::Client::Localization::ContentIdStatus>() {
  return ::Digit::Client::Localization::ContentIdStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Digit_2eClient_2eLocalization_2eproto_2epb_2eh
