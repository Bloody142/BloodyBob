// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Digit.Prime.Bookmarks.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eBookmarks_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eBookmarks_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Digit_2ePrime_2eBookmarks_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Digit_2ePrime_2eBookmarks_2eproto {
  static const ::uint32_t offsets[];
};
namespace Digit {
namespace Prime {
namespace Bookmarks {
class Bookmark;
struct BookmarkDefaultTypeInternal;
extern BookmarkDefaultTypeInternal _Bookmark_default_instance_;
class BookmarksSaveData;
struct BookmarksSaveDataDefaultTypeInternal;
extern BookmarksSaveDataDefaultTypeInternal _BookmarksSaveData_default_instance_;
}  // namespace Bookmarks
}  // namespace Prime
}  // namespace Digit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Digit {
namespace Prime {
namespace Bookmarks {

// ===================================================================


// -------------------------------------------------------------------

class Bookmark final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Digit.Prime.Bookmarks.Bookmark) */ {
 public:
  inline Bookmark() : Bookmark(nullptr) {}
  ~Bookmark() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Bookmark(::google::protobuf::internal::ConstantInitialized);

  Bookmark(const Bookmark& from);
  Bookmark(Bookmark&& from) noexcept
    : Bookmark() {
    *this = ::std::move(from);
  }

  inline Bookmark& operator=(const Bookmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bookmark& operator=(Bookmark&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Bookmark& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bookmark* internal_default_instance() {
    return reinterpret_cast<const Bookmark*>(
               &_Bookmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bookmark& a, Bookmark& b) {
    a.Swap(&b);
  }
  inline void Swap(Bookmark* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bookmark* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bookmark* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bookmark>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Bookmark& from);
  void MergeFrom(const Bookmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bookmark* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Prime.Bookmarks.Bookmark";
  }
  protected:
  explicit Bookmark(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUserProfileIdFieldNumber = 9,
    kSystemIDFieldNumber = 3,
    kCategoryFieldNumber = 2,
    kXCoordinateFieldNumber = 4,
    kModifiedAtFieldNumber = 6,
    kYCoordinateFieldNumber = 5,
    kLocationTypeFieldNumber = 7,
    kPlanetLocaIdFieldNumber = 10,
    kResourceLocaIdFieldNumber = 11,
    kMissionLocaIdFieldNumber = 12,
    kPlanetTypeFieldNumber = 8,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string userProfileId = 9;
  void clear_userprofileid() ;
  const std::string& userprofileid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userprofileid(Arg_&& arg, Args_... args);
  std::string* mutable_userprofileid();
  PROTOBUF_NODISCARD std::string* release_userprofileid();
  void set_allocated_userprofileid(std::string* ptr);

  private:
  const std::string& _internal_userprofileid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userprofileid(
      const std::string& value);
  std::string* _internal_mutable_userprofileid();

  public:
  // int64 systemID = 3;
  void clear_systemid() ;
  ::int64_t systemid() const;
  void set_systemid(::int64_t value);

  private:
  ::int64_t _internal_systemid() const;
  void _internal_set_systemid(::int64_t value);

  public:
  // int32 category = 2;
  void clear_category() ;
  ::int32_t category() const;
  void set_category(::int32_t value);

  private:
  ::int32_t _internal_category() const;
  void _internal_set_category(::int32_t value);

  public:
  // float xCoordinate = 4;
  void clear_xcoordinate() ;
  float xcoordinate() const;
  void set_xcoordinate(float value);

  private:
  float _internal_xcoordinate() const;
  void _internal_set_xcoordinate(float value);

  public:
  // int64 modifiedAt = 6;
  void clear_modifiedat() ;
  ::int64_t modifiedat() const;
  void set_modifiedat(::int64_t value);

  private:
  ::int64_t _internal_modifiedat() const;
  void _internal_set_modifiedat(::int64_t value);

  public:
  // float yCoordinate = 5;
  void clear_ycoordinate() ;
  float ycoordinate() const;
  void set_ycoordinate(float value);

  private:
  float _internal_ycoordinate() const;
  void _internal_set_ycoordinate(float value);

  public:
  // int32 locationType = 7;
  void clear_locationtype() ;
  ::int32_t locationtype() const;
  void set_locationtype(::int32_t value);

  private:
  ::int32_t _internal_locationtype() const;
  void _internal_set_locationtype(::int32_t value);

  public:
  // int64 planetLocaId = 10;
  void clear_planetlocaid() ;
  ::int64_t planetlocaid() const;
  void set_planetlocaid(::int64_t value);

  private:
  ::int64_t _internal_planetlocaid() const;
  void _internal_set_planetlocaid(::int64_t value);

  public:
  // int64 resourceLocaId = 11;
  void clear_resourcelocaid() ;
  ::int64_t resourcelocaid() const;
  void set_resourcelocaid(::int64_t value);

  private:
  ::int64_t _internal_resourcelocaid() const;
  void _internal_set_resourcelocaid(::int64_t value);

  public:
  // int64 missionLocaId = 12;
  void clear_missionlocaid() ;
  ::int64_t missionlocaid() const;
  void set_missionlocaid(::int64_t value);

  private:
  ::int64_t _internal_missionlocaid() const;
  void _internal_set_missionlocaid(::int64_t value);

  public:
  // int32 planetType = 8;
  void clear_planettype() ;
  ::int32_t planettype() const;
  void set_planettype(::int32_t value);

  private:
  ::int32_t _internal_planettype() const;
  void _internal_set_planettype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Digit.Prime.Bookmarks.Bookmark)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 12, 0, 64, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr userprofileid_;
    ::int64_t systemid_;
    ::int32_t category_;
    float xcoordinate_;
    ::int64_t modifiedat_;
    float ycoordinate_;
    ::int32_t locationtype_;
    ::int64_t planetlocaid_;
    ::int64_t resourcelocaid_;
    ::int64_t missionlocaid_;
    ::int32_t planettype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2ePrime_2eBookmarks_2eproto;
};// -------------------------------------------------------------------

class BookmarksSaveData final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Digit.Prime.Bookmarks.BookmarksSaveData) */ {
 public:
  inline BookmarksSaveData() : BookmarksSaveData(nullptr) {}
  ~BookmarksSaveData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BookmarksSaveData(::google::protobuf::internal::ConstantInitialized);

  BookmarksSaveData(const BookmarksSaveData& from);
  BookmarksSaveData(BookmarksSaveData&& from) noexcept
    : BookmarksSaveData() {
    *this = ::std::move(from);
  }

  inline BookmarksSaveData& operator=(const BookmarksSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookmarksSaveData& operator=(BookmarksSaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BookmarksSaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookmarksSaveData* internal_default_instance() {
    return reinterpret_cast<const BookmarksSaveData*>(
               &_BookmarksSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookmarksSaveData& a, BookmarksSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(BookmarksSaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookmarksSaveData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookmarksSaveData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookmarksSaveData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const BookmarksSaveData& from);
  void MergeFrom(const BookmarksSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BookmarksSaveData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Prime.Bookmarks.BookmarksSaveData";
  }
  protected:
  explicit BookmarksSaveData(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookmarksFieldNumber = 1,
  };
  // repeated .Digit.Prime.Bookmarks.Bookmark bookmarks = 1;
  int bookmarks_size() const;
  private:
  int _internal_bookmarks_size() const;

  public:
  void clear_bookmarks() ;
  ::Digit::Prime::Bookmarks::Bookmark* mutable_bookmarks(int index);
  ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Bookmarks::Bookmark >*
      mutable_bookmarks();
  private:
  const ::google::protobuf::RepeatedPtrField<::Digit::Prime::Bookmarks::Bookmark>& _internal_bookmarks() const;
  ::google::protobuf::RepeatedPtrField<::Digit::Prime::Bookmarks::Bookmark>* _internal_mutable_bookmarks();
  public:
  const ::Digit::Prime::Bookmarks::Bookmark& bookmarks(int index) const;
  ::Digit::Prime::Bookmarks::Bookmark* add_bookmarks();
  const ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Bookmarks::Bookmark >&
      bookmarks() const;
  // @@protoc_insertion_point(class_scope:Digit.Prime.Bookmarks.BookmarksSaveData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Bookmarks::Bookmark > bookmarks_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2ePrime_2eBookmarks_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Bookmark

// string name = 1;
inline void Bookmark::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bookmark::name() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bookmark::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.name)
}
inline std::string* Bookmark::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Digit.Prime.Bookmarks.Bookmark.name)
  return _s;
}
inline const std::string& Bookmark::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Bookmark::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bookmark::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Bookmark::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Prime.Bookmarks.Bookmark.name)
  return _impl_.name_.Release();
}
inline void Bookmark::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Digit.Prime.Bookmarks.Bookmark.name)
}

// int32 category = 2;
inline void Bookmark::clear_category() {
  _impl_.category_ = 0;
}
inline ::int32_t Bookmark::category() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.category)
  return _internal_category();
}
inline void Bookmark::set_category(::int32_t value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.category)
}
inline ::int32_t Bookmark::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.category_;
}
inline void Bookmark::_internal_set_category(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_ = value;
}

// int64 systemID = 3;
inline void Bookmark::clear_systemid() {
  _impl_.systemid_ = ::int64_t{0};
}
inline ::int64_t Bookmark::systemid() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.systemID)
  return _internal_systemid();
}
inline void Bookmark::set_systemid(::int64_t value) {
  _internal_set_systemid(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.systemID)
}
inline ::int64_t Bookmark::_internal_systemid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.systemid_;
}
inline void Bookmark::_internal_set_systemid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.systemid_ = value;
}

// float xCoordinate = 4;
inline void Bookmark::clear_xcoordinate() {
  _impl_.xcoordinate_ = 0;
}
inline float Bookmark::xcoordinate() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.xCoordinate)
  return _internal_xcoordinate();
}
inline void Bookmark::set_xcoordinate(float value) {
  _internal_set_xcoordinate(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.xCoordinate)
}
inline float Bookmark::_internal_xcoordinate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.xcoordinate_;
}
inline void Bookmark::_internal_set_xcoordinate(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.xcoordinate_ = value;
}

// float yCoordinate = 5;
inline void Bookmark::clear_ycoordinate() {
  _impl_.ycoordinate_ = 0;
}
inline float Bookmark::ycoordinate() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.yCoordinate)
  return _internal_ycoordinate();
}
inline void Bookmark::set_ycoordinate(float value) {
  _internal_set_ycoordinate(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.yCoordinate)
}
inline float Bookmark::_internal_ycoordinate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ycoordinate_;
}
inline void Bookmark::_internal_set_ycoordinate(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ycoordinate_ = value;
}

// int64 modifiedAt = 6;
inline void Bookmark::clear_modifiedat() {
  _impl_.modifiedat_ = ::int64_t{0};
}
inline ::int64_t Bookmark::modifiedat() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.modifiedAt)
  return _internal_modifiedat();
}
inline void Bookmark::set_modifiedat(::int64_t value) {
  _internal_set_modifiedat(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.modifiedAt)
}
inline ::int64_t Bookmark::_internal_modifiedat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.modifiedat_;
}
inline void Bookmark::_internal_set_modifiedat(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.modifiedat_ = value;
}

// int32 locationType = 7;
inline void Bookmark::clear_locationtype() {
  _impl_.locationtype_ = 0;
}
inline ::int32_t Bookmark::locationtype() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.locationType)
  return _internal_locationtype();
}
inline void Bookmark::set_locationtype(::int32_t value) {
  _internal_set_locationtype(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.locationType)
}
inline ::int32_t Bookmark::_internal_locationtype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.locationtype_;
}
inline void Bookmark::_internal_set_locationtype(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.locationtype_ = value;
}

// int32 planetType = 8;
inline void Bookmark::clear_planettype() {
  _impl_.planettype_ = 0;
}
inline ::int32_t Bookmark::planettype() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.planetType)
  return _internal_planettype();
}
inline void Bookmark::set_planettype(::int32_t value) {
  _internal_set_planettype(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.planetType)
}
inline ::int32_t Bookmark::_internal_planettype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.planettype_;
}
inline void Bookmark::_internal_set_planettype(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.planettype_ = value;
}

// string userProfileId = 9;
inline void Bookmark::clear_userprofileid() {
  _impl_.userprofileid_.ClearToEmpty();
}
inline const std::string& Bookmark::userprofileid() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.userProfileId)
  return _internal_userprofileid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bookmark::set_userprofileid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userprofileid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.userProfileId)
}
inline std::string* Bookmark::mutable_userprofileid() {
  std::string* _s = _internal_mutable_userprofileid();
  // @@protoc_insertion_point(field_mutable:Digit.Prime.Bookmarks.Bookmark.userProfileId)
  return _s;
}
inline const std::string& Bookmark::_internal_userprofileid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userprofileid_.Get();
}
inline void Bookmark::_internal_set_userprofileid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userprofileid_.Set(value, GetArenaForAllocation());
}
inline std::string* Bookmark::_internal_mutable_userprofileid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userprofileid_.Mutable( GetArenaForAllocation());
}
inline std::string* Bookmark::release_userprofileid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Prime.Bookmarks.Bookmark.userProfileId)
  return _impl_.userprofileid_.Release();
}
inline void Bookmark::set_allocated_userprofileid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userprofileid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userprofileid_.IsDefault()) {
          _impl_.userprofileid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Digit.Prime.Bookmarks.Bookmark.userProfileId)
}

// int64 planetLocaId = 10;
inline void Bookmark::clear_planetlocaid() {
  _impl_.planetlocaid_ = ::int64_t{0};
}
inline ::int64_t Bookmark::planetlocaid() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.planetLocaId)
  return _internal_planetlocaid();
}
inline void Bookmark::set_planetlocaid(::int64_t value) {
  _internal_set_planetlocaid(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.planetLocaId)
}
inline ::int64_t Bookmark::_internal_planetlocaid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.planetlocaid_;
}
inline void Bookmark::_internal_set_planetlocaid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.planetlocaid_ = value;
}

// int64 resourceLocaId = 11;
inline void Bookmark::clear_resourcelocaid() {
  _impl_.resourcelocaid_ = ::int64_t{0};
}
inline ::int64_t Bookmark::resourcelocaid() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.resourceLocaId)
  return _internal_resourcelocaid();
}
inline void Bookmark::set_resourcelocaid(::int64_t value) {
  _internal_set_resourcelocaid(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.resourceLocaId)
}
inline ::int64_t Bookmark::_internal_resourcelocaid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resourcelocaid_;
}
inline void Bookmark::_internal_set_resourcelocaid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.resourcelocaid_ = value;
}

// int64 missionLocaId = 12;
inline void Bookmark::clear_missionlocaid() {
  _impl_.missionlocaid_ = ::int64_t{0};
}
inline ::int64_t Bookmark::missionlocaid() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.Bookmark.missionLocaId)
  return _internal_missionlocaid();
}
inline void Bookmark::set_missionlocaid(::int64_t value) {
  _internal_set_missionlocaid(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Bookmarks.Bookmark.missionLocaId)
}
inline ::int64_t Bookmark::_internal_missionlocaid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.missionlocaid_;
}
inline void Bookmark::_internal_set_missionlocaid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.missionlocaid_ = value;
}

// -------------------------------------------------------------------

// BookmarksSaveData

// repeated .Digit.Prime.Bookmarks.Bookmark bookmarks = 1;
inline int BookmarksSaveData::_internal_bookmarks_size() const {
  return _internal_bookmarks().size();
}
inline int BookmarksSaveData::bookmarks_size() const {
  return _internal_bookmarks_size();
}
inline void BookmarksSaveData::clear_bookmarks() {
  _internal_mutable_bookmarks()->Clear();
}
inline ::Digit::Prime::Bookmarks::Bookmark* BookmarksSaveData::mutable_bookmarks(int index) {
  // @@protoc_insertion_point(field_mutable:Digit.Prime.Bookmarks.BookmarksSaveData.bookmarks)
  return _internal_mutable_bookmarks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Bookmarks::Bookmark >*
BookmarksSaveData::mutable_bookmarks() {
  // @@protoc_insertion_point(field_mutable_list:Digit.Prime.Bookmarks.BookmarksSaveData.bookmarks)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bookmarks();
}
inline const ::Digit::Prime::Bookmarks::Bookmark& BookmarksSaveData::bookmarks(int index) const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Bookmarks.BookmarksSaveData.bookmarks)
    return _internal_bookmarks().Get(index);
}
inline ::Digit::Prime::Bookmarks::Bookmark* BookmarksSaveData::add_bookmarks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Digit::Prime::Bookmarks::Bookmark* _add = _internal_mutable_bookmarks()->Add();
  // @@protoc_insertion_point(field_add:Digit.Prime.Bookmarks.BookmarksSaveData.bookmarks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Bookmarks::Bookmark >&
BookmarksSaveData::bookmarks() const {
  // @@protoc_insertion_point(field_list:Digit.Prime.Bookmarks.BookmarksSaveData.bookmarks)
  return _internal_bookmarks();
}
inline const ::google::protobuf::RepeatedPtrField<::Digit::Prime::Bookmarks::Bookmark>&
BookmarksSaveData::_internal_bookmarks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bookmarks_;
}
inline ::google::protobuf::RepeatedPtrField<::Digit::Prime::Bookmarks::Bookmark>*
BookmarksSaveData::_internal_mutable_bookmarks() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bookmarks_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Bookmarks
}  // namespace Prime
}  // namespace Digit


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eBookmarks_2eproto_2epb_2eh
