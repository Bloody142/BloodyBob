// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Digit.Prime.Inventories.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eInventories_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eInventories_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry_lite.h"
#include "google/protobuf/map_field_lite.h"
#include "google/protobuf/generated_enum_util.h"
#include "google/protobuf/timestamp.pb.h"
#include "Digit.PrimeServer.Models.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Digit_2ePrime_2eInventories_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Digit_2ePrime_2eInventories_2eproto {
  static const ::uint32_t offsets[];
};
namespace Digit {
namespace Prime {
namespace Inventories {
class InventoryGroup;
struct InventoryGroupDefaultTypeInternal;
extern InventoryGroupDefaultTypeInternal _InventoryGroup_default_instance_;
class InventoryGroupList;
struct InventoryGroupListDefaultTypeInternal;
extern InventoryGroupListDefaultTypeInternal _InventoryGroupList_default_instance_;
class InventoryGrouping;
struct InventoryGroupingDefaultTypeInternal;
extern InventoryGroupingDefaultTypeInternal _InventoryGrouping_default_instance_;
class InventoryGrouping_GroupingEntry_DoNotUse;
struct InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal;
extern InventoryGrouping_GroupingEntry_DoNotUseDefaultTypeInternal _InventoryGrouping_GroupingEntry_DoNotUse_default_instance_;
}  // namespace Inventories
}  // namespace Prime
}  // namespace Digit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Digit {
namespace Prime {
namespace Inventories {
enum InventoryTabOptions : int {
  INVENTORYTABOPTIONS_NONE = 0,
  INVENTORYTABOPTIONS_INVALID = -1,
  INVENTORYTABOPTIONS_LOOTCRATES = 1261962744,
  INVENTORYTABOPTIONS_SPEEDUPS = -2066518095,
  INVENTORYTABOPTIONS_MATERIALS = -1609867252,
  INVENTORYTABOPTIONS_SPECIAL = -343811943,
  INVENTORYTABOPTIONS_RESOURCEBATCHES = -693797542,
  INVENTORYTABOPTIONS_TERRITORYCAPTURE = 246919692,
  INVENTORYTABOPTIONS_CONSUMABLES = -1372096702,
  InventoryTabOptions_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  InventoryTabOptions_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool InventoryTabOptions_IsValid(int value);
constexpr InventoryTabOptions InventoryTabOptions_MIN = static_cast<InventoryTabOptions>(-2066518095);
constexpr InventoryTabOptions InventoryTabOptions_MAX = static_cast<InventoryTabOptions>(1261962744);
constexpr int InventoryTabOptions_ARRAYSIZE = 1261962744 + 1;
const std::string& InventoryTabOptions_Name(InventoryTabOptions value);
template <typename T>
const std::string& InventoryTabOptions_Name(T value) {
  static_assert(std::is_same<T, InventoryTabOptions>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InventoryTabOptions_Name().");
  return InventoryTabOptions_Name(static_cast<InventoryTabOptions>(value));
}
const std::string& InventoryTabOptions_Name(InventoryTabOptions value);
bool InventoryTabOptions_Parse(absl::string_view name, InventoryTabOptions* value);
enum ResourceSubtype : int {
  RESOURCESUBTYPE_NONE = 0,
  RESOURCESUBTYPE_SOFT = 1,
  RESOURCESUBTYPE_HARD = 2,
  RESOURCESUBTYPE_RAWMATERIAL = 3,
  RESOURCESUBTYPE_REFINEDMATERIAL = 4,
  RESOURCESUBTYPE_TOKEN = 5,
  RESOURCESUBTYPE_INTEL = 6,
  RESOURCESUBTYPE_FACTIONPOINT = 7,
  RESOURCESUBTYPE_SPEEDUPTOKEN = 8,
  RESOURCESUBTYPE_RESOURCEBATCH = 9,
  RESOURCESUBTYPE_DAILY = 10,
  RESOURCESUBTYPE_MATERIAL = 11,
  RESOURCESUBTYPE_PEACESHIELDTOKEN = 12,
  RESOURCESUBTYPE_PEACESHIELD = 13,
  RESOURCESUBTYPE_SCRAPPEDMATERIAL = 14,
  RESOURCESUBTYPE_TERRITORYCAPTURE = 15,
  RESOURCESUBTYPE_COSMETICSSHARD = 16,
  ResourceSubtype_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResourceSubtype_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResourceSubtype_IsValid(int value);
constexpr ResourceSubtype ResourceSubtype_MIN = static_cast<ResourceSubtype>(0);
constexpr ResourceSubtype ResourceSubtype_MAX = static_cast<ResourceSubtype>(16);
constexpr int ResourceSubtype_ARRAYSIZE = 16 + 1;
const std::string& ResourceSubtype_Name(ResourceSubtype value);
template <typename T>
const std::string& ResourceSubtype_Name(T value) {
  static_assert(std::is_same<T, ResourceSubtype>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResourceSubtype_Name().");
  return ResourceSubtype_Name(static_cast<ResourceSubtype>(value));
}
const std::string& ResourceSubtype_Name(ResourceSubtype value);
bool ResourceSubtype_Parse(absl::string_view name, ResourceSubtype* value);

// ===================================================================


// -------------------------------------------------------------------

class InventoryGroup final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Digit.Prime.Inventories.InventoryGroup) */ {
 public:
  inline InventoryGroup() : InventoryGroup(nullptr) {}
  ~InventoryGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InventoryGroup(::google::protobuf::internal::ConstantInitialized);

  InventoryGroup(const InventoryGroup& from);
  InventoryGroup(InventoryGroup&& from) noexcept
    : InventoryGroup() {
    *this = ::std::move(from);
  }

  inline InventoryGroup& operator=(const InventoryGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryGroup& operator=(InventoryGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InventoryGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const InventoryGroup* internal_default_instance() {
    return reinterpret_cast<const InventoryGroup*>(
               &_InventoryGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InventoryGroup& a, InventoryGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InventoryGroup* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InventoryGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const InventoryGroup& from);
  void MergeFrom(const InventoryGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InventoryGroup* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Prime.Inventories.InventoryGroup";
  }
  protected:
  explicit InventoryGroup(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedSubtypesFieldNumber = 2,
    kIdRefsFieldNumber = 5,
    kGroupIdFieldNumber = 1,
    kSortingOrderFieldNumber = 3,
    kGradeFieldNumber = 4,
    kTabFieldNumber = 6,
  };
  // repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
  int supportedsubtypes_size() const;
  private:
  int _internal_supportedsubtypes_size() const;

  public:
  void clear_supportedsubtypes() ;
  public:
  ::Digit::Prime::Inventories::ResourceSubtype supportedsubtypes(int index) const;
  void set_supportedsubtypes(int index, ::Digit::Prime::Inventories::ResourceSubtype value);
  void add_supportedsubtypes(::Digit::Prime::Inventories::ResourceSubtype value);
  const ::google::protobuf::RepeatedField<int>& supportedsubtypes() const;
  ::google::protobuf::RepeatedField<int>* mutable_supportedsubtypes();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_supportedsubtypes() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_supportedsubtypes();

  public:
  // .Digit.PrimeServer.Models.IdRefs idRefs = 5;
  bool has_idrefs() const;
  void clear_idrefs() ;
  const ::Digit::PrimeServer::Models::IdRefs& idrefs() const;
  PROTOBUF_NODISCARD ::Digit::PrimeServer::Models::IdRefs* release_idrefs();
  ::Digit::PrimeServer::Models::IdRefs* mutable_idrefs();
  void set_allocated_idrefs(::Digit::PrimeServer::Models::IdRefs* value);
  void unsafe_arena_set_allocated_idrefs(::Digit::PrimeServer::Models::IdRefs* value);
  ::Digit::PrimeServer::Models::IdRefs* unsafe_arena_release_idrefs();

  private:
  const ::Digit::PrimeServer::Models::IdRefs& _internal_idrefs() const;
  ::Digit::PrimeServer::Models::IdRefs* _internal_mutable_idrefs();

  public:
  // int32 groupId = 1;
  void clear_groupid() ;
  ::int32_t groupid() const;
  void set_groupid(::int32_t value);

  private:
  ::int32_t _internal_groupid() const;
  void _internal_set_groupid(::int32_t value);

  public:
  // int32 sortingOrder = 3;
  void clear_sortingorder() ;
  ::int32_t sortingorder() const;
  void set_sortingorder(::int32_t value);

  private:
  ::int32_t _internal_sortingorder() const;
  void _internal_set_sortingorder(::int32_t value);

  public:
  // int32 grade = 4;
  void clear_grade() ;
  ::int32_t grade() const;
  void set_grade(::int32_t value);

  private:
  ::int32_t _internal_grade() const;
  void _internal_set_grade(::int32_t value);

  public:
  // .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
  void clear_tab() ;
  ::Digit::Prime::Inventories::InventoryTabOptions tab() const;
  void set_tab(::Digit::Prime::Inventories::InventoryTabOptions value);

  private:
  ::Digit::Prime::Inventories::InventoryTabOptions _internal_tab() const;
  void _internal_set_tab(::Digit::Prime::Inventories::InventoryTabOptions value);

  public:
  // @@protoc_insertion_point(class_scope:Digit.Prime.Inventories.InventoryGroup)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> supportedsubtypes_;
    mutable ::google::protobuf::internal::CachedSize _supportedsubtypes_cached_byte_size_;
    ::Digit::PrimeServer::Models::IdRefs* idrefs_;
    ::int32_t groupid_;
    ::int32_t sortingorder_;
    ::int32_t grade_;
    int tab_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2ePrime_2eInventories_2eproto;
};// -------------------------------------------------------------------

class InventoryGrouping_GroupingEntry_DoNotUse final : public ::google::protobuf::internal::MapEntryLite<InventoryGrouping_GroupingEntry_DoNotUse, 
    ::int32_t, ::Digit::Prime::Inventories::InventoryGroupList,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntryLite<InventoryGrouping_GroupingEntry_DoNotUse, 
    ::int32_t, ::Digit::Prime::Inventories::InventoryGroupList,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InventoryGrouping_GroupingEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InventoryGrouping_GroupingEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit InventoryGrouping_GroupingEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const InventoryGrouping_GroupingEntry_DoNotUse& other);
  static const InventoryGrouping_GroupingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InventoryGrouping_GroupingEntry_DoNotUse*>(&_InventoryGrouping_GroupingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_Digit_2ePrime_2eInventories_2eproto;
};
// -------------------------------------------------------------------

class InventoryGrouping final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Digit.Prime.Inventories.InventoryGrouping) */ {
 public:
  inline InventoryGrouping() : InventoryGrouping(nullptr) {}
  ~InventoryGrouping() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InventoryGrouping(::google::protobuf::internal::ConstantInitialized);

  InventoryGrouping(const InventoryGrouping& from);
  InventoryGrouping(InventoryGrouping&& from) noexcept
    : InventoryGrouping() {
    *this = ::std::move(from);
  }

  inline InventoryGrouping& operator=(const InventoryGrouping& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryGrouping& operator=(InventoryGrouping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InventoryGrouping& default_instance() {
    return *internal_default_instance();
  }
  static inline const InventoryGrouping* internal_default_instance() {
    return reinterpret_cast<const InventoryGrouping*>(
               &_InventoryGrouping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InventoryGrouping& a, InventoryGrouping& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryGrouping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryGrouping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InventoryGrouping* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InventoryGrouping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const InventoryGrouping& from);
  void MergeFrom(const InventoryGrouping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InventoryGrouping* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Prime.Inventories.InventoryGrouping";
  }
  protected:
  explicit InventoryGrouping(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGroupingFieldNumber = 1,
  };
  // map<int32, .Digit.Prime.Inventories.InventoryGroupList> grouping = 1;
  int grouping_size() const;
  private:
  int _internal_grouping_size() const;

  public:
  void clear_grouping() ;
  const ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>& grouping() const;
  ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>* mutable_grouping();

  private:
  const ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>& _internal_grouping() const;
  ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>* _internal_mutable_grouping();

  public:
  // @@protoc_insertion_point(class_scope:Digit.Prime.Inventories.InventoryGrouping)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapFieldLite<InventoryGrouping_GroupingEntry_DoNotUse, ::int32_t, ::Digit::Prime::Inventories::InventoryGroupList,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        grouping_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2ePrime_2eInventories_2eproto;
};// -------------------------------------------------------------------

class InventoryGroupList final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Digit.Prime.Inventories.InventoryGroupList) */ {
 public:
  inline InventoryGroupList() : InventoryGroupList(nullptr) {}
  ~InventoryGroupList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InventoryGroupList(::google::protobuf::internal::ConstantInitialized);

  InventoryGroupList(const InventoryGroupList& from);
  InventoryGroupList(InventoryGroupList&& from) noexcept
    : InventoryGroupList() {
    *this = ::std::move(from);
  }

  inline InventoryGroupList& operator=(const InventoryGroupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryGroupList& operator=(InventoryGroupList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InventoryGroupList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InventoryGroupList* internal_default_instance() {
    return reinterpret_cast<const InventoryGroupList*>(
               &_InventoryGroupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InventoryGroupList& a, InventoryGroupList& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryGroupList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryGroupList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InventoryGroupList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InventoryGroupList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const InventoryGroupList& from);
  void MergeFrom(const InventoryGroupList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InventoryGroupList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Digit.Prime.Inventories.InventoryGroupList";
  }
  protected:
  explicit InventoryGroupList(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;

  public:
  void clear_groups() ;
  ::Digit::Prime::Inventories::InventoryGroup* mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Inventories::InventoryGroup >*
      mutable_groups();
  private:
  const ::google::protobuf::RepeatedPtrField<::Digit::Prime::Inventories::InventoryGroup>& _internal_groups() const;
  ::google::protobuf::RepeatedPtrField<::Digit::Prime::Inventories::InventoryGroup>* _internal_mutable_groups();
  public:
  const ::Digit::Prime::Inventories::InventoryGroup& groups(int index) const;
  ::Digit::Prime::Inventories::InventoryGroup* add_groups();
  const ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Inventories::InventoryGroup >&
      groups() const;
  // @@protoc_insertion_point(class_scope:Digit.Prime.Inventories.InventoryGroupList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Inventories::InventoryGroup > groups_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Digit_2ePrime_2eInventories_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InventoryGroup

// int32 groupId = 1;
inline void InventoryGroup::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline ::int32_t InventoryGroup::groupid() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Inventories.InventoryGroup.groupId)
  return _internal_groupid();
}
inline void InventoryGroup::set_groupid(::int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Inventories.InventoryGroup.groupId)
}
inline ::int32_t InventoryGroup::_internal_groupid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.groupid_;
}
inline void InventoryGroup::_internal_set_groupid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.groupid_ = value;
}

// repeated .Digit.Prime.Inventories.ResourceSubtype supportedSubtypes = 2;
inline int InventoryGroup::_internal_supportedsubtypes_size() const {
  return _internal_supportedsubtypes().size();
}
inline int InventoryGroup::supportedsubtypes_size() const {
  return _internal_supportedsubtypes_size();
}
inline void InventoryGroup::clear_supportedsubtypes() {
  _internal_mutable_supportedsubtypes()->Clear();
}
inline ::Digit::Prime::Inventories::ResourceSubtype InventoryGroup::supportedsubtypes(int index) const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Inventories.InventoryGroup.supportedSubtypes)
  return static_cast<::Digit::Prime::Inventories::ResourceSubtype>(_internal_supportedsubtypes().Get(index));
}
inline void InventoryGroup::set_supportedsubtypes(int index, ::Digit::Prime::Inventories::ResourceSubtype value) {
  _internal_mutable_supportedsubtypes()->Set(index, value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Inventories.InventoryGroup.supportedSubtypes)
}
inline void InventoryGroup::add_supportedsubtypes(::Digit::Prime::Inventories::ResourceSubtype value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_supportedsubtypes()->Add(value);
  // @@protoc_insertion_point(field_add:Digit.Prime.Inventories.InventoryGroup.supportedSubtypes)
}
inline const ::google::protobuf::RepeatedField<int>& InventoryGroup::supportedsubtypes() const {
  // @@protoc_insertion_point(field_list:Digit.Prime.Inventories.InventoryGroup.supportedSubtypes)
  return _internal_supportedsubtypes();
}
inline ::google::protobuf::RepeatedField<int>* InventoryGroup::mutable_supportedsubtypes() {
  // @@protoc_insertion_point(field_mutable_list:Digit.Prime.Inventories.InventoryGroup.supportedSubtypes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_supportedsubtypes();
}
inline const ::google::protobuf::RepeatedField<int>& InventoryGroup::_internal_supportedsubtypes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.supportedsubtypes_;
}
inline ::google::protobuf::RepeatedField<int>* InventoryGroup::_internal_mutable_supportedsubtypes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.supportedsubtypes_;
}

// int32 sortingOrder = 3;
inline void InventoryGroup::clear_sortingorder() {
  _impl_.sortingorder_ = 0;
}
inline ::int32_t InventoryGroup::sortingorder() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Inventories.InventoryGroup.sortingOrder)
  return _internal_sortingorder();
}
inline void InventoryGroup::set_sortingorder(::int32_t value) {
  _internal_set_sortingorder(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Inventories.InventoryGroup.sortingOrder)
}
inline ::int32_t InventoryGroup::_internal_sortingorder() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sortingorder_;
}
inline void InventoryGroup::_internal_set_sortingorder(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sortingorder_ = value;
}

// int32 grade = 4;
inline void InventoryGroup::clear_grade() {
  _impl_.grade_ = 0;
}
inline ::int32_t InventoryGroup::grade() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Inventories.InventoryGroup.grade)
  return _internal_grade();
}
inline void InventoryGroup::set_grade(::int32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Inventories.InventoryGroup.grade)
}
inline ::int32_t InventoryGroup::_internal_grade() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.grade_;
}
inline void InventoryGroup::_internal_set_grade(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.grade_ = value;
}

// .Digit.PrimeServer.Models.IdRefs idRefs = 5;
inline bool InventoryGroup::has_idrefs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.idrefs_ != nullptr);
  return value;
}
inline const ::Digit::PrimeServer::Models::IdRefs& InventoryGroup::_internal_idrefs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Digit::PrimeServer::Models::IdRefs* p = _impl_.idrefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::Digit::PrimeServer::Models::IdRefs&>(::Digit::PrimeServer::Models::_IdRefs_default_instance_);
}
inline const ::Digit::PrimeServer::Models::IdRefs& InventoryGroup::idrefs() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Inventories.InventoryGroup.idRefs)
  return _internal_idrefs();
}
inline void InventoryGroup::unsafe_arena_set_allocated_idrefs(::Digit::PrimeServer::Models::IdRefs* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.idrefs_);
  }
  _impl_.idrefs_ = reinterpret_cast<::Digit::PrimeServer::Models::IdRefs*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Digit.Prime.Inventories.InventoryGroup.idRefs)
}
inline ::Digit::PrimeServer::Models::IdRefs* InventoryGroup::release_idrefs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Digit::PrimeServer::Models::IdRefs* released = _impl_.idrefs_;
  _impl_.idrefs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Digit::PrimeServer::Models::IdRefs* InventoryGroup::unsafe_arena_release_idrefs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Digit.Prime.Inventories.InventoryGroup.idRefs)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Digit::PrimeServer::Models::IdRefs* temp = _impl_.idrefs_;
  _impl_.idrefs_ = nullptr;
  return temp;
}
inline ::Digit::PrimeServer::Models::IdRefs* InventoryGroup::_internal_mutable_idrefs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.idrefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::Digit::PrimeServer::Models::IdRefs>(GetArenaForAllocation());
    _impl_.idrefs_ = reinterpret_cast<::Digit::PrimeServer::Models::IdRefs*>(p);
  }
  return _impl_.idrefs_;
}
inline ::Digit::PrimeServer::Models::IdRefs* InventoryGroup::mutable_idrefs() {
  ::Digit::PrimeServer::Models::IdRefs* _msg = _internal_mutable_idrefs();
  // @@protoc_insertion_point(field_mutable:Digit.Prime.Inventories.InventoryGroup.idRefs)
  return _msg;
}
inline void InventoryGroup::set_allocated_idrefs(::Digit::PrimeServer::Models::IdRefs* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.idrefs_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.idrefs_ = reinterpret_cast<::Digit::PrimeServer::Models::IdRefs*>(value);
  // @@protoc_insertion_point(field_set_allocated:Digit.Prime.Inventories.InventoryGroup.idRefs)
}

// .Digit.Prime.Inventories.InventoryTabOptions tab = 6;
inline void InventoryGroup::clear_tab() {
  _impl_.tab_ = 0;
}
inline ::Digit::Prime::Inventories::InventoryTabOptions InventoryGroup::tab() const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Inventories.InventoryGroup.tab)
  return _internal_tab();
}
inline void InventoryGroup::set_tab(::Digit::Prime::Inventories::InventoryTabOptions value) {
  _internal_set_tab(value);
  // @@protoc_insertion_point(field_set:Digit.Prime.Inventories.InventoryGroup.tab)
}
inline ::Digit::Prime::Inventories::InventoryTabOptions InventoryGroup::_internal_tab() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Digit::Prime::Inventories::InventoryTabOptions>(_impl_.tab_);
}
inline void InventoryGroup::_internal_set_tab(::Digit::Prime::Inventories::InventoryTabOptions value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tab_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InventoryGrouping

// map<int32, .Digit.Prime.Inventories.InventoryGroupList> grouping = 1;
inline int InventoryGrouping::_internal_grouping_size() const {
  return _internal_grouping().size();
}
inline int InventoryGrouping::grouping_size() const {
  return _internal_grouping_size();
}
inline void InventoryGrouping::clear_grouping() {
  _impl_.grouping_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>& InventoryGrouping::_internal_grouping() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.grouping_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>& InventoryGrouping::grouping() const {
  // @@protoc_insertion_point(field_map:Digit.Prime.Inventories.InventoryGrouping.grouping)
  return _internal_grouping();
}
inline ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>* InventoryGrouping::_internal_mutable_grouping() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.grouping_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::Digit::Prime::Inventories::InventoryGroupList>* InventoryGrouping::mutable_grouping() {
  // @@protoc_insertion_point(field_mutable_map:Digit.Prime.Inventories.InventoryGrouping.grouping)
  return _internal_mutable_grouping();
}

// -------------------------------------------------------------------

// InventoryGroupList

// repeated .Digit.Prime.Inventories.InventoryGroup groups = 1;
inline int InventoryGroupList::_internal_groups_size() const {
  return _internal_groups().size();
}
inline int InventoryGroupList::groups_size() const {
  return _internal_groups_size();
}
inline void InventoryGroupList::clear_groups() {
  _internal_mutable_groups()->Clear();
}
inline ::Digit::Prime::Inventories::InventoryGroup* InventoryGroupList::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:Digit.Prime.Inventories.InventoryGroupList.groups)
  return _internal_mutable_groups()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Inventories::InventoryGroup >*
InventoryGroupList::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:Digit.Prime.Inventories.InventoryGroupList.groups)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_groups();
}
inline const ::Digit::Prime::Inventories::InventoryGroup& InventoryGroupList::groups(int index) const {
  // @@protoc_insertion_point(field_get:Digit.Prime.Inventories.InventoryGroupList.groups)
    return _internal_groups().Get(index);
}
inline ::Digit::Prime::Inventories::InventoryGroup* InventoryGroupList::add_groups() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Digit::Prime::Inventories::InventoryGroup* _add = _internal_mutable_groups()->Add();
  // @@protoc_insertion_point(field_add:Digit.Prime.Inventories.InventoryGroupList.groups)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Digit::Prime::Inventories::InventoryGroup >&
InventoryGroupList::groups() const {
  // @@protoc_insertion_point(field_list:Digit.Prime.Inventories.InventoryGroupList.groups)
  return _internal_groups();
}
inline const ::google::protobuf::RepeatedPtrField<::Digit::Prime::Inventories::InventoryGroup>&
InventoryGroupList::_internal_groups() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.groups_;
}
inline ::google::protobuf::RepeatedPtrField<::Digit::Prime::Inventories::InventoryGroup>*
InventoryGroupList::_internal_mutable_groups() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.groups_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Inventories
}  // namespace Prime
}  // namespace Digit


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Digit::Prime::Inventories::InventoryTabOptions> : std::true_type {};
template <>
struct is_proto_enum<::Digit::Prime::Inventories::ResourceSubtype> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Digit_2ePrime_2eInventories_2eproto_2epb_2eh
